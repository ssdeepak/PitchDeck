{"version":3,"mappings":"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","names":["TodoAppComponent","__vitePreload","error","stored","parsed","limitedTodos","todo","item","button","e","filter","eventBus","data","todoData","total","completed","active","completionRate","text","priority","id","t","newText","div","styles","container","existingItems","nextNode","matches","hasVisibleTodos","statsDiv","stats","filterMessage","buttonFilter"],"sources":["../../src/components/windows/todo-app.component.ts"],"sourcesContent":["/**\r\n * Todo App Web Component\r\n * A comprehensive todo application built with Web Components\r\n * Demonstrates complex state management, component composition, and Shadow DOM\r\n */\r\n\r\nimport { eventBus } from '../../core/events/event-bus.js';\r\n\r\ninterface Todo {\r\n  id: string;\r\n  text: string;\r\n  completed: boolean;\r\n  createdAt: Date;\r\n  priority: 'low' | 'medium' | 'high';\r\n}\r\n\r\nexport class TodoAppComponent extends HTMLElement {\r\n  private shadow: ShadowRoot;\r\n  private todos: Todo[] = [];\r\n  private filter: 'all' | 'active' | 'completed' = 'all';\r\n  private eventListenersSetup = false;\r\n  private todoListContainer: HTMLElement | null = null;\r\n  private emptyStateElement: HTMLElement | null = null;\r\n\r\n  constructor() {\r\n    super();\r\n    this.shadow = this.attachShadow({ mode: 'open' });\r\n    this.loadTodos();\r\n    // Don't render in constructor - wait for connectedCallback\r\n  }\r\n\r\n  /**\r\n   * Component connected to DOM\r\n   */\r\n  connectedCallback(): void {\r\n    console.log('Todo App Web Component connected');\r\n    this.loadAddTodoComponent().then(() => {\r\n      this.renderStaticLayout();\r\n      this.setupEventListeners();\r\n      this.renderTodoList();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Load the AddTodoComponent dynamically\r\n   */\r\n  private async loadAddTodoComponent(): Promise<void> {\r\n    try {\r\n      // Import the AddTodoComponent and TodoItemComponent to ensure they're registered\r\n      await import('./add-todo.component.js');\r\n      await import('./todo-item.component.js');\r\n      console.log('Todo components loaded successfully');\r\n    } catch (error) {\r\n      console.error('Failed to load todo components:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Component disconnected from DOM\r\n   */\r\n  disconnectedCallback(): void {\r\n    console.log('Todo App Web Component disconnected');\r\n  }\r\n\r\n  /**\r\n   * Load todos from localStorage\r\n   */\r\n  private loadTodos(): void {\r\n    try {\r\n      const stored = localStorage.getItem('vfs-todos');\r\n      if (stored) {\r\n        const parsed = JSON.parse(stored);\r\n        // Limit to reasonable number of todos to prevent performance issues\r\n        const limitedTodos = parsed.slice(0, 50); // Max 50 todos\r\n        this.todos = limitedTodos.map((todo: any) => ({\r\n          ...todo,\r\n          createdAt: new Date(todo.createdAt)\r\n        }));\r\n        console.log(`Loaded ${this.todos.length} todos from localStorage (limited to 50 max)`);\r\n        \r\n        // If we had more than 50, save the limited version\r\n        if (parsed.length > 50) {\r\n          console.warn(`Found ${parsed.length} todos, limiting to 50 for performance`);\r\n          this.saveTodos();\r\n        }\r\n      } else {\r\n        console.log('No todos found in localStorage');\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to load todos:', error);\r\n      this.todos = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save todos to localStorage\r\n   */\r\n  private saveTodos(): void {\r\n    try {\r\n      localStorage.setItem('vfs-todos', JSON.stringify(this.todos));\r\n    } catch (error) {\r\n      console.error('Failed to save todos:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the component\r\n   */\r\n  private render(): void {\r\n    // Deprecated: replaced by incremental rendering\r\n  }\r\n\r\n  /**\r\n   * Get component styles\r\n   */\r\n  private getStyles(): string {\r\n    return [\r\n      ':host { display: block; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif; background: #f8f9fa; border-radius: 8px; overflow: hidden; }',\r\n      '[hidden] { display: none !important; }',\r\n      '.todo-app { display: flex; flex-direction: column; height: 100%; }',\r\n      \r\n      '.todo-content { flex: 1; display: flex; flex-direction: column; padding: 5px; gap: 5px; }',\r\n      '.todo-filters { display: flex; gap: 10px; justify-content: center; margin-bottom: 5px; }',\r\n      '.filter-btn { padding: 8px 16px; border: none; border-radius: 5px; cursor: pointer; font-size: 14px; font-weight: 500; transition: all 0.2s; }',\r\n      '.filter-btn.active { background: #007acc; color: white; }',\r\n      '.filter-btn:not(.active) { background: #e9ecef; color: #495057; }',\r\n      '.filter-btn:not(.active):hover { background: #dee2e6; }',\r\n      '.todo-list { flex: 1; overflow-y: auto; max-height: 300px; }',\r\n      '.todo-empty { text-align: center; color: #6c757d; padding: 40px 5px; }',\r\n      '.todo-empty i { font-size: 48px; margin-bottom: 16px; display: block; opacity: 0.5; }',\r\n      '.todo-stats { background: white; border-radius: 8px; padding: 16px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }',\r\n      '.stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(15px, 1fr)); gap: 16px; }',\r\n      '.stat-item { text-align: center; }',\r\n      '.stat-number { font-size: 24px; font-weight: bold; color: #007acc; }',\r\n      '.stat-label { font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 0.5px; }',\r\n      '.priority-high { border-left: 4px solid #dc3545; }',\r\n      '.priority-medium { border-left: 4px solid #ffc107; }',\r\n      '.priority-low { border-left: 4px solid #28a745; }',\r\n      '@keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }',\r\n      '.todo-item { animation: fadeIn 0.3s ease-out; }'\r\n    ].join(' ');\r\n  }\r\n\r\n  /**\r\n   * Get component template\r\n   */\r\n  private getTemplate(): string {\r\n    // Deprecated: replaced by incremental rendering\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Render a single todo item\r\n   */\r\n  private renderTodoItem(todo: Todo): HTMLElement {\r\n    const item = document.createElement('vfs-todo-item');\r\n    this.updateTodoItemElement(item, todo);\r\n    return item;\r\n  }\r\n\r\n  private updateTodoItemElement(item: HTMLElement, todo: Todo): void {\r\n    item.setAttribute('todo-id', todo.id);\r\n    item.setAttribute('text', this.escapeHtml(todo.text));\r\n    item.setAttribute('completed', String(todo.completed));\r\n    item.setAttribute('priority', todo.priority);\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Only setup event listeners once\r\n    if (this.eventListenersSetup) return;\r\n    this.eventListenersSetup = true;\r\n\r\n    // Filter buttons\r\n    const filterButtons = this.shadow.querySelectorAll('.filter-btn');\r\n    filterButtons.forEach(button => {\r\n      button.addEventListener('click', (e) => {\r\n        const filter = (e.target as HTMLElement).dataset.filter as 'all' | 'active' | 'completed';\r\n        this.setFilter(filter);\r\n      });\r\n    });\r\n\r\n    // Listen for todo item events\r\n    eventBus.on('todo:toggle', (data: any) => {\r\n      this.toggleTodo(data.id);\r\n    });\r\n\r\n    eventBus.on('todo:delete', (data: any) => {\r\n      this.deleteTodo(data.id);\r\n    });\r\n\r\n    eventBus.on('todo:edit', (data: any) => {\r\n      this.editTodo(data.id, data.text);\r\n    });\r\n\r\n    // Listen for add todo events\r\n    eventBus.on('todo:add', (todoData: any) => {\r\n      this.addTodo(todoData.text, todoData.priority);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get filtered todos\r\n   */\r\n  private getFilteredTodos(): Todo[] {\r\n    switch (this.filter) {\r\n      case 'active':\r\n        return this.todos.filter(todo => !todo.completed);\r\n      case 'completed':\r\n        return this.todos.filter(todo => todo.completed);\r\n      default:\r\n        return this.todos;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get todo statistics\r\n   */\r\n  private getStats() {\r\n    const total = this.todos.length;\r\n    const completed = this.todos.filter(todo => todo.completed).length;\r\n    const active = total - completed;\r\n    const completionRate = total > 0 ? (completed / total) * 100 : 0;\r\n\r\n    return { total, active, completed, completionRate };\r\n  }\r\n\r\n  /**\r\n   * Set filter and re-render\r\n   */\r\n  private setFilter(filter: 'all' | 'active' | 'completed'): void {\r\n    this.filter = filter;\r\n    this.updateFilterButtons();\r\n    this.renderTodoList();\r\n  }\r\n\r\n  /**\r\n   * Add a new todo\r\n   */\r\n  private addTodo(text: string, priority: 'low' | 'medium' | 'high' = 'medium'): void {\r\n    if (!text.trim()) return;\r\n\r\n    console.log(`Adding todo: \"${text}\" with priority ${priority}`);\r\n    const todo: Todo = {\r\n      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\r\n      text: text.trim(),\r\n      completed: false,\r\n      createdAt: new Date(),\r\n      priority\r\n    };\r\n\r\n    this.todos.unshift(todo); // Add to beginning\r\n    this.saveTodos();\r\n    this.renderTodoList();\r\n  }\r\n\r\n  /**\r\n   * Toggle todo completion\r\n   */\r\n  private toggleTodo(id: string): void {\r\n    const todo = this.todos.find(t => t.id === id);\r\n    if (todo) {\r\n      todo.completed = !todo.completed;\r\n      this.saveTodos();\r\n      this.renderTodoList();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Edit a todo\r\n   */\r\n  private editTodo(id: string, newText: string): void {\r\n    const todo = this.todos.find(t => t.id === id);\r\n    if (todo && newText.trim()) {\r\n      todo.text = newText.trim();\r\n      this.saveTodos();\r\n      this.renderTodoList();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a todo\r\n   */\r\n  private deleteTodo(id: string): void {\r\n    this.todos = this.todos.filter(t => t.id !== id);\r\n    this.saveTodos();\r\n    this.renderTodoList();\r\n  }\r\n\r\n  /**\r\n   * Escape HTML for safe rendering\r\n   */\r\n  private escapeHtml(text: string): string {\r\n    const div = document.createElement('div');\r\n    div.textContent = text;\r\n    return div.innerHTML;\r\n  }\r\n\r\n  /**\r\n   * Render the static layout (header, filters, stats, add-todo, todo-list container)\r\n   */\r\n  private renderStaticLayout(): void {\r\n    const styles = this.getStyles();\r\n    this.shadow.innerHTML = `<style>${styles}</style>\r\n      <div class=\"todo-app\">\r\n        \r\n        <div class=\"todo-content\">\r\n          <div class=\"todo-filters\">\r\n            <button class=\"filter-btn ${this.filter === 'all' ? 'active' : ''}\" data-filter=\"all\">All</button>\r\n            <button class=\"filter-btn ${this.filter === 'active' ? 'active' : ''}\" data-filter=\"active\">Active</button>\r\n            <button class=\"filter-btn ${this.filter === 'completed' ? 'active' : ''}\" data-filter=\"completed\">Completed</button>\r\n          </div>\r\n          <div class=\"todo-list\"></div>\r\n          <div class=\"todo-stats\"></div>\r\n          <vfs-add-todo></vfs-add-todo>\r\n        </div>\r\n      </div>`;\r\n    this.todoListContainer = this.shadow.querySelector('.todo-list');\r\n    if (this.todoListContainer) {\r\n      this.emptyStateElement = document.createElement('div');\r\n      this.emptyStateElement.className = 'todo-empty';\r\n      this.emptyStateElement.setAttribute('hidden', '');\r\n      this.todoListContainer.appendChild(this.emptyStateElement);\r\n    }\r\n    this.updateFilterButtons();\r\n    this.renderStats();\r\n  }\r\n\r\n  /**\r\n   * Render only the todo list incrementally\r\n   */\r\n  private renderTodoList(): void {\r\n    if (!this.todoListContainer) {\r\n      this.todoListContainer = this.shadow.querySelector('.todo-list');\r\n      if (!this.todoListContainer) return;\r\n    }\r\n    const container = this.todoListContainer;\r\n    const existingItems = new Map<string, HTMLElement>();\r\n    container.querySelectorAll<HTMLElement>('vfs-todo-item').forEach(item => {\r\n      const id = item.getAttribute('todo-id');\r\n      if (id) {\r\n        existingItems.set(id, item);\r\n      }\r\n    });\r\n\r\n    let nextNode: ChildNode | null = container.firstChild;\r\n    if (nextNode === this.emptyStateElement) {\r\n      nextNode = this.emptyStateElement;\r\n    }\r\n\r\n    for (const todo of this.todos) {\r\n      let item = existingItems.get(todo.id);\r\n      if (item) {\r\n        this.updateTodoItemElement(item, todo);\r\n        existingItems.delete(todo.id);\r\n      } else {\r\n        item = this.renderTodoItem(todo);\r\n      }\r\n\r\n      if (item !== nextNode && (item.parentElement !== container || item.nextSibling !== nextNode)) {\r\n        container.insertBefore(item, nextNode);\r\n      }\r\n      nextNode = item.nextSibling;\r\n\r\n      const matches = this.matchesFilter(todo);\r\n      item.toggleAttribute('hidden', !matches);\r\n    }\r\n\r\n    existingItems.forEach(item => item.remove());\r\n\r\n    const hasVisibleTodos = this.todos.some(todo => this.matchesFilter(todo));\r\n    this.updateEmptyState(hasVisibleTodos);\r\n    this.updateFilterButtons();\r\n    this.renderStats();\r\n  }\r\n\r\n  /**\r\n   * Render the statistics dashboard\r\n   */\r\n  private renderStats(): void {\r\n    const statsDiv = this.shadow.querySelector('.todo-stats');\r\n    if (!statsDiv) return;\r\n    const stats = this.getStats();\r\n    statsDiv.innerHTML = `<div class=\"stats-grid\">\r\n      <div class=\"stat-item\"><div class=\"stat-number\">${stats.total}</div><div class=\"stat-label\">Total</div></div>\r\n      <div class=\"stat-item\"><div class=\"stat-number\">${stats.active}</div><div class=\"stat-label\">Active</div></div>\r\n      <div class=\"stat-item\"><div class=\"stat-number\">${stats.completed}</div><div class=\"stat-label\">Completed</div></div>\r\n      <div class=\"stat-item\"><div class=\"stat-number\">${Math.round(stats.completionRate)}%</div><div class=\"stat-label\">Done</div></div>\r\n    </div>`;\r\n  }\r\n\r\n  private matchesFilter(todo: Todo): boolean {\r\n    switch (this.filter) {\r\n      case 'active':\r\n        return !todo.completed;\r\n      case 'completed':\r\n        return todo.completed;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  private updateEmptyState(hasVisibleTodos: boolean): void {\r\n    if (!this.todoListContainer) return;\r\n    if (!this.emptyStateElement) {\r\n      this.emptyStateElement = document.createElement('div');\r\n      this.emptyStateElement.className = 'todo-empty';\r\n      this.todoListContainer.appendChild(this.emptyStateElement);\r\n    }\r\n\r\n    const filterMessage = this.filter === 'all' ? 'Add your first todo below!' : 'Try a different filter';\r\n    this.emptyStateElement.innerHTML = `<i>📋</i><div>No todos found</div><div style=\"font-size: 12px; margin-top: 8px;\">${filterMessage}</div>`;\r\n    this.emptyStateElement.toggleAttribute('hidden', hasVisibleTodos);\r\n  }\r\n\r\n  private updateFilterButtons(): void {\r\n    const filterButtons = this.shadow.querySelectorAll<HTMLButtonElement>('.filter-btn');\r\n    filterButtons.forEach(button => {\r\n      const buttonFilter = button.dataset.filter as 'all' | 'active' | 'completed' | undefined;\r\n      button.classList.toggle('active', buttonFilter === this.filter);\r\n    });\r\n  }\r\n}\r\n\r\n// Register the Web Component\r\ncustomElements.define('vfs-todo-app', TodoAppComponent);"],"file":"assets/todo-app.component-128f6b80.js"}