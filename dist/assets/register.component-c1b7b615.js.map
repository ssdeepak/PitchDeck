{"version":3,"file":"register.component-c1b7b615.js","sources":["../../src/components/windows/register.component.ts"],"sourcesContent":["/**\r\n * Register Component\r\n * Professional registration form component for VFS Desktop\r\n */\r\n\r\nimport { BaseComponent } from '../base/base-component.js';\r\nimport { serviceContainer, SERVICE_TOKENS } from '../../core/di/service-container.js';\r\nimport { eventBus } from '../../core/events/event-bus.js';\r\nimport type { IAuthService, IWindowManager } from '../../core/types/index.js';\r\n\r\ninterface RegisterFormData {\r\n  username: string;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n  tier: 'Basic' | 'Standard' | 'Premium';\r\n  acceptTerms: boolean;\r\n}\r\n\r\nexport class RegisterComponent extends BaseComponent {\r\n  private authService!: IAuthService;\r\n  private windowManager!: IWindowManager;\r\n\r\n  // Form state\r\n  private formData: RegisterFormData = {\r\n    username: '',\r\n    email: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    tier: 'Basic',\r\n    acceptTerms: false\r\n  };\r\n\r\n  private isLoading = false;\r\n  private errorMessage: string | null = null;\r\n  private fieldErrors: Record<string, string> = {};\r\n\r\n  // Validation rules\r\n  private readonly passwordMinLength = 8;\r\n  private readonly usernameMinLength = 3;\r\n\r\n  /**\r\n   * Mount the register component\r\n   */\r\n  async mount(): Promise<void> {\r\n    console.log('Mounting Register component...');\r\n\r\n    // Get required services\r\n    this.authService = serviceContainer.get(SERVICE_TOKENS.AUTH_SERVICE);\r\n    this.windowManager = serviceContainer.get(SERVICE_TOKENS.WINDOW_MANAGER);\r\n\r\n    // Build the registration form\r\n    this.buildRegistrationForm();\r\n\r\n    // Setup event listeners\r\n    this.setupEventListeners();\r\n\r\n    this._mounted = true;\r\n    console.log('Register component mounted');\r\n  }\r\n\r\n  /**\r\n   * Build the complete registration form structure\r\n   */\r\n  private buildRegistrationForm(): void {\r\n    this.container.innerHTML = '';\r\n    this.container.className = 'window-register-container';\r\n\r\n    // Create header\r\n    this.createHeader();\r\n\r\n    // Create form\r\n    this.createForm();\r\n  }\r\n\r\n  /**\r\n   * Create registration header\r\n   */\r\n  private createHeader(): void {\r\n    const header = this.createElement('div', { class: 'register-header' });\r\n    \r\n    const title = this.createElement('h2', {}, 'Create Your Account');\r\n    const subtitle = this.createElement('p', {}, 'Join VFS Desktop to manage your files in the cloud');\r\n    \r\n    header.appendChild(title);\r\n    header.appendChild(subtitle);\r\n    this.container.appendChild(header);\r\n  }\r\n\r\n  /**\r\n   * Create registration form\r\n   */\r\n  private createForm(): void {\r\n    const form = this.createElement('form', { class: 'register-form' });\r\n    \r\n    // Error message container\r\n    const errorContainer = this.createElement('div', { \r\n      class: 'error-message',\r\n      style: 'display: none;'\r\n    });\r\n    form.appendChild(errorContainer);\r\n\r\n    // Personal info section\r\n    const personalSection = this.createSection('Personal Information');\r\n    \r\n    // First name field\r\n    const firstNameGroup = this.createFormGroup(\r\n      'firstName',\r\n      'First Name',\r\n      'text',\r\n      'Enter your first name',\r\n      this.formData.firstName,\r\n      true\r\n    );\r\n    personalSection.appendChild(firstNameGroup);\r\n\r\n    // Last name field\r\n    const lastNameGroup = this.createFormGroup(\r\n      'lastName',\r\n      'Last Name',\r\n      'text',\r\n      'Enter your last name',\r\n      this.formData.lastName,\r\n      true\r\n    );\r\n    personalSection.appendChild(lastNameGroup);\r\n\r\n    form.appendChild(personalSection);\r\n\r\n    // Account info section\r\n    const accountSection = this.createSection('Account Information');\r\n\r\n    // Username field\r\n    const usernameGroup = this.createFormGroup(\r\n      'username',\r\n      'Username',\r\n      'text',\r\n      'Choose a unique username',\r\n      this.formData.username,\r\n      true\r\n    );\r\n    accountSection.appendChild(usernameGroup);\r\n\r\n    // Email field\r\n    const emailGroup = this.createFormGroup(\r\n      'email',\r\n      'Email Address',\r\n      'email',\r\n      'Enter your email address',\r\n      this.formData.email,\r\n      true\r\n    );\r\n    accountSection.appendChild(emailGroup);\r\n\r\n    form.appendChild(accountSection);\r\n\r\n    // Password section\r\n    const passwordSection = this.createSection('Security');\r\n\r\n    // Password field\r\n    const passwordGroup = this.createFormGroup(\r\n      'password',\r\n      'Password',\r\n      'password',\r\n      `Enter a strong password (min ${this.passwordMinLength} characters)`,\r\n      this.formData.password,\r\n      true\r\n    );\r\n    passwordSection.appendChild(passwordGroup);\r\n\r\n    // Confirm password field\r\n    const confirmPasswordGroup = this.createFormGroup(\r\n      'confirmPassword',\r\n      'Confirm Password',\r\n      'password',\r\n      'Re-enter your password',\r\n      this.formData.confirmPassword,\r\n      true\r\n    );\r\n    passwordSection.appendChild(confirmPasswordGroup);\r\n\r\n    form.appendChild(passwordSection);\r\n\r\n    // Tier selection\r\n    const tierSection = this.createSection('Account Tier');\r\n    const tierGroup = this.createTierSelection();\r\n    tierSection.appendChild(tierGroup);\r\n    form.appendChild(tierSection);\r\n\r\n    // Terms acceptance\r\n    const termsGroup = this.createCheckboxGroup(\r\n      'acceptTerms',\r\n      'I agree to the Terms of Service and Privacy Policy',\r\n      this.formData.acceptTerms,\r\n      true\r\n    );\r\n    form.appendChild(termsGroup);\r\n\r\n    // Form actions\r\n    const actionsGroup = this.createFormActions();\r\n    form.appendChild(actionsGroup);\r\n\r\n    // Handle form submission\r\n    this.addEventListener(form, 'submit', (e) => {\r\n      e.preventDefault();\r\n      this.handleRegister();\r\n    });\r\n\r\n    this.container.appendChild(form);\r\n  }\r\n\r\n  /**\r\n   * Create a form section with title\r\n   */\r\n  private createSection(title: string): HTMLElement {\r\n    const section = this.createElement('div', { class: 'form-section' });\r\n    const titleEl = this.createElement('h3', { class: 'section-title' }, title);\r\n    section.appendChild(titleEl);\r\n    return section;\r\n  }\r\n\r\n  /**\r\n   * Create a form group with label and input\r\n   */\r\n  private createFormGroup(\r\n    id: keyof RegisterFormData,\r\n    label: string,\r\n    type: string,\r\n    placeholder: string,\r\n    value: string,\r\n    required: boolean = false\r\n  ): HTMLElement {\r\n    const group = this.createElement('div', { class: 'form-group' });\r\n    \r\n    const labelEl = this.createElement('label', { for: id });\r\n    labelEl.textContent = label;\r\n    if (required) {\r\n      const asterisk = this.createElement('span', { class: 'required' }, ' *');\r\n      labelEl.appendChild(asterisk);\r\n    }\r\n\r\n    const input = this.createElement('input', {\r\n      type,\r\n      id,\r\n      name: id,\r\n      placeholder,\r\n      value,\r\n      ...(required ? { required: 'required' } : {}),\r\n      autocomplete: this.getAutocomplete(id)\r\n    }) as HTMLInputElement;\r\n\r\n    // Field error container\r\n    const errorEl = this.createElement('div', { \r\n      class: 'field-error',\r\n      style: 'display: none;'\r\n    });\r\n\r\n    // Update form data and validate on input change\r\n    this.addEventListener(input, 'input', () => {\r\n      (this.formData as any)[id] = input.value;\r\n      this.validateField(id, input.value);\r\n    });\r\n\r\n    this.addEventListener(input, 'blur', () => {\r\n      this.validateField(id, input.value);\r\n    });\r\n\r\n    group.appendChild(labelEl);\r\n    group.appendChild(input);\r\n    group.appendChild(errorEl);\r\n    \r\n    return group;\r\n  }\r\n\r\n  /**\r\n   * Create tier selection radio group\r\n   */\r\n  private createTierSelection(): HTMLElement {\r\n    const group = this.createElement('div', { class: 'form-group tier-selection' });\r\n    \r\n    const tiers = [\r\n      { value: 'Basic', label: 'Basic', description: 'Free tier with basic features' },\r\n      { value: 'Standard', label: 'Standard', description: 'Enhanced features and more storage' },\r\n      { value: 'Premium', label: 'Premium', description: 'Full access to all features' }\r\n    ];\r\n\r\n    tiers.forEach((tier, index) => {\r\n      const tierOption = this.createElement('div', { class: 'tier-option' });\r\n      \r\n      const radio = this.createElement('input', {\r\n        type: 'radio',\r\n        id: `tier-${tier.value}`,\r\n        name: 'tier',\r\n        value: tier.value,\r\n        ...(index === 0 ? { checked: 'checked' } : {}) // Default to Basic\r\n      }) as HTMLInputElement;\r\n\r\n      const label = this.createElement('label', { for: `tier-${tier.value}` });\r\n      const titleSpan = this.createElement('span', { class: 'tier-title' }, tier.label);\r\n      const descSpan = this.createElement('span', { class: 'tier-description' }, tier.description);\r\n      \r\n      label.appendChild(titleSpan);\r\n      label.appendChild(descSpan);\r\n\r\n      // Update form data on change\r\n      this.addEventListener(radio, 'change', () => {\r\n        if (radio.checked) {\r\n          this.formData.tier = tier.value as any;\r\n        }\r\n      });\r\n\r\n      tierOption.appendChild(radio);\r\n      tierOption.appendChild(label);\r\n      group.appendChild(tierOption);\r\n    });\r\n\r\n    return group;\r\n  }\r\n\r\n  /**\r\n   * Create checkbox form group\r\n   */\r\n  private createCheckboxGroup(\r\n    id: keyof RegisterFormData,\r\n    label: string,\r\n    checked: boolean,\r\n    required: boolean = false\r\n  ): HTMLElement {\r\n    const group = this.createElement('div', { class: 'form-group checkbox' });\r\n    \r\n    const input = this.createElement('input', {\r\n      type: 'checkbox',\r\n      id,\r\n      name: id,\r\n      ...(checked ? { checked: 'checked' } : {}),\r\n      ...(required ? { required: 'required' } : {})\r\n    }) as HTMLInputElement;\r\n\r\n    const labelEl = this.createElement('label', { for: id });\r\n    labelEl.innerHTML = label;\r\n    if (required) {\r\n      const asterisk = this.createElement('span', { class: 'required' }, ' *');\r\n      labelEl.appendChild(asterisk);\r\n    }\r\n\r\n    // Field error container\r\n    const errorEl = this.createElement('div', { \r\n      class: 'field-error',\r\n      style: 'display: none;'\r\n    });\r\n\r\n    // Update form data on change\r\n    this.addEventListener(input, 'change', () => {\r\n      (this.formData as any)[id] = input.checked;\r\n      if (required) {\r\n        this.validateField(id, input.checked.toString());\r\n      }\r\n    });\r\n\r\n    group.appendChild(input);\r\n    group.appendChild(labelEl);\r\n    group.appendChild(errorEl);\r\n    \r\n    return group;\r\n  }\r\n\r\n  /**\r\n   * Create form actions (buttons)\r\n   */\r\n  private createFormActions(): HTMLElement {\r\n    const actions = this.createElement('div', { class: 'form-actions' });\r\n    \r\n    // Register button\r\n    const registerBtn = this.createElement('button', {\r\n      type: 'submit',\r\n      class: 'btn btn-primary',\r\n      id: 'register-btn'\r\n    });\r\n    \r\n    const registerText = this.createElement('span', {}, 'Create Account');\r\n    registerBtn.appendChild(registerText);\r\n    \r\n    // Back to login button\r\n    const loginBtn = this.createElement('button', {\r\n      type: 'button',\r\n      class: 'btn btn-link'\r\n    }, 'Already have an account? Sign in');\r\n\r\n    this.addEventListener(loginBtn, 'click', () => this.goToLogin());\r\n\r\n    actions.appendChild(registerBtn);\r\n    actions.appendChild(loginBtn);\r\n    \r\n    return actions;\r\n  }\r\n\r\n  /**\r\n   * Get autocomplete attribute for field\r\n   */\r\n  private getAutocomplete(field: keyof RegisterFormData): string {\r\n    const autocompleteMap: Record<string, string> = {\r\n      username: 'username',\r\n      email: 'email',\r\n      firstName: 'given-name',\r\n      lastName: 'family-name',\r\n      password: 'new-password',\r\n      confirmPassword: 'new-password'\r\n    };\r\n    return autocompleteMap[field] || 'off';\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for auth events\r\n    eventBus.on('auth:register', () => this.handleRegisterSuccess());\r\n  }\r\n\r\n  /**\r\n   * Validate individual field\r\n   */\r\n  private validateField(field: keyof RegisterFormData, value: string): boolean {\r\n    let isValid = true;\r\n    let errorMessage = '';\r\n\r\n    switch (field) {\r\n      case 'username':\r\n        if (!value.trim()) {\r\n          errorMessage = 'Username is required';\r\n          isValid = false;\r\n        } else if (value.length < this.usernameMinLength) {\r\n          errorMessage = `Username must be at least ${this.usernameMinLength} characters`;\r\n          isValid = false;\r\n        } else if (!/^[a-zA-Z0-9_-]+$/.test(value)) {\r\n          errorMessage = 'Username can only contain letters, numbers, hyphens, and underscores';\r\n          isValid = false;\r\n        }\r\n        break;\r\n\r\n      case 'email':\r\n        if (!value.trim()) {\r\n          errorMessage = 'Email address is required';\r\n          isValid = false;\r\n        } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\r\n          errorMessage = 'Please enter a valid email address';\r\n          isValid = false;\r\n        }\r\n        break;\r\n\r\n      case 'firstName':\r\n      case 'lastName':\r\n        if (!value.trim()) {\r\n          errorMessage = `${field === 'firstName' ? 'First' : 'Last'} name is required`;\r\n          isValid = false;\r\n        }\r\n        break;\r\n\r\n      case 'password':\r\n        if (!value) {\r\n          errorMessage = 'Password is required';\r\n          isValid = false;\r\n        } else if (value.length < this.passwordMinLength) {\r\n          errorMessage = `Password must be at least ${this.passwordMinLength} characters`;\r\n          isValid = false;\r\n        } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(value)) {\r\n          errorMessage = 'Password must contain at least one uppercase letter, one lowercase letter, and one number';\r\n          isValid = false;\r\n        }\r\n        // Also validate confirm password if it has a value\r\n        if (this.formData.confirmPassword) {\r\n          this.validateField('confirmPassword', this.formData.confirmPassword);\r\n        }\r\n        break;\r\n\r\n      case 'confirmPassword':\r\n        if (!value) {\r\n          errorMessage = 'Please confirm your password';\r\n          isValid = false;\r\n        } else if (value !== this.formData.password) {\r\n          errorMessage = 'Passwords do not match';\r\n          isValid = false;\r\n        }\r\n        break;\r\n\r\n      case 'acceptTerms':\r\n        if (value !== 'true') {\r\n          errorMessage = 'You must accept the terms and conditions';\r\n          isValid = false;\r\n        }\r\n        break;\r\n    }\r\n\r\n    // Update field error display\r\n    this.showFieldError(field, isValid ? null : errorMessage);\r\n    \r\n    if (isValid) {\r\n      delete this.fieldErrors[field];\r\n    } else {\r\n      this.fieldErrors[field] = errorMessage;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  /**\r\n   * Show field-specific error\r\n   */\r\n  private showFieldError(field: keyof RegisterFormData, message: string | null): void {\r\n    const fieldGroup = this.container.querySelector(`#${field}`)?.closest('.form-group');\r\n    const errorEl = fieldGroup?.querySelector('.field-error') as HTMLElement;\r\n    \r\n    if (errorEl) {\r\n      if (message) {\r\n        errorEl.textContent = message;\r\n        errorEl.style.display = 'block';\r\n        fieldGroup?.classList.add('has-error');\r\n      } else {\r\n        errorEl.style.display = 'none';\r\n        fieldGroup?.classList.remove('has-error');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate entire form\r\n   */\r\n  private validateForm(): boolean {\r\n    let isValid = true;\r\n\r\n    // Validate all required fields\r\n    Object.keys(this.formData).forEach(key => {\r\n      const field = key as keyof RegisterFormData;\r\n      const value = this.formData[field];\r\n      \r\n      if (!this.validateField(field, value.toString())) {\r\n        isValid = false;\r\n      }\r\n    });\r\n\r\n    return isValid;\r\n  }\r\n\r\n  /**\r\n   * Handle registration form submission\r\n   */\r\n  private async handleRegister(): Promise<void> {\r\n    // Validate form\r\n    if (!this.validateForm()) {\r\n      this.showError('Please correct the errors above');\r\n      return;\r\n    }\r\n\r\n    // Set loading state\r\n    this.setLoading(true);\r\n    this.clearError();\r\n\r\n    try {\r\n      // Attempt registration\r\n      const user = await this.authService.register(\r\n        this.formData.username.trim(),\r\n        this.formData.password,\r\n        this.formData.email.trim()\r\n      );\r\n\r\n      console.log('Registration successful:', user.username);\r\n      \r\n      // Success will be handled by event listener\r\n      \r\n    } catch (error) {\r\n      console.error('Registration failed:', error);\r\n      this.showError(\r\n        error instanceof Error ? error.message : 'Registration failed. Please try again.'\r\n      );\r\n    } finally {\r\n      this.setLoading(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle successful registration\r\n   */\r\n  private async handleRegisterSuccess(): Promise<void> {\r\n    try {\r\n      // Show success notification\r\n      this.showNotification('Registration Successful', `Welcome to VFS Desktop, ${this.formData.firstName}!`);\r\n\r\n      // Small delay for UX\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n\r\n      // Close register window\r\n      this.windowManager.closeWindow('register');\r\n\r\n      // Open file explorer\r\n      setTimeout(() => {\r\n        this.openFileExplorer();\r\n      }, 200);\r\n\r\n    } catch (error) {\r\n      console.error('Error handling registration success:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Navigate to login window\r\n   */\r\n  private async goToLogin(): Promise<void> {\r\n    try {\r\n      // Create login window\r\n      await this.windowManager.createWindow('login', {\r\n        title: 'Login',\r\n        size: { width: 400, height: 350 },\r\n        position: { x: 150, y: 100 }\r\n      });\r\n\r\n      // Close register window\r\n      this.windowManager.closeWindow('register');\r\n    } catch (error) {\r\n      console.error('Error opening login window:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Open file explorer (placeholder)\r\n   */\r\n  private async openFileExplorer(): Promise<void> {\r\n    try {\r\n      await this.windowManager.createWindow('file-explorer', {\r\n        title: 'File Explorer',\r\n        size: { width: 800, height: 600 },\r\n        position: { x: 200, y: 100 }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error opening file explorer:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show error message\r\n   */\r\n  private showError(message: string): void {\r\n    this.errorMessage = message;\r\n    const errorEl = this.container.querySelector('.error-message') as HTMLElement;\r\n    if (errorEl) {\r\n      errorEl.textContent = message;\r\n      errorEl.style.display = 'block';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear error message\r\n   */\r\n  private clearError(): void {\r\n    this.errorMessage = null;\r\n    const errorEl = this.container.querySelector('.error-message') as HTMLElement;\r\n    if (errorEl) {\r\n      errorEl.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set loading state\r\n   */\r\n  private setLoading(loading: boolean): void {\r\n    this.isLoading = loading;\r\n    \r\n    const registerBtn = this.container.querySelector('#register-btn') as HTMLButtonElement;\r\n    const form = this.container.querySelector('form') as HTMLFormElement;\r\n    \r\n    if (registerBtn && form) {\r\n      registerBtn.disabled = loading;\r\n      \r\n      // Update button content  \r\n      if (loading) {\r\n        registerBtn.innerHTML = `\r\n          <span class=\"spinner\"></span>\r\n          <span>Creating Account...</span>\r\n        `;\r\n      } else {\r\n        registerBtn.innerHTML = '<span>Create Account</span>';\r\n      }\r\n\r\n      // Disable form inputs\r\n      const inputs = form.querySelectorAll('input, button');\r\n      inputs.forEach((input: Element) => {\r\n        (input as HTMLInputElement | HTMLButtonElement).disabled = loading;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show notification (placeholder - would integrate with notification service)\r\n   */\r\n  private showNotification(title: string, message: string): void {\r\n    console.log(`${title}: ${message}`);\r\n    // TODO: Integrate with notification service when available\r\n  }\r\n\r\n  /**\r\n   * Unmount the register component\r\n   */\r\n  override async unmount(): Promise<void> {\r\n    // Clean up event listeners\r\n    eventBus.off('auth:register', this.handleRegisterSuccess);\r\n    \r\n    await this.baseUnmount();\r\n    console.log('Register component unmounted');\r\n  }\r\n}"],"names":["RegisterComponent","BaseComponent","serviceContainer","SERVICE_TOKENS","header","title","subtitle","form","errorContainer","personalSection","firstNameGroup","lastNameGroup","accountSection","usernameGroup","emailGroup","passwordSection","passwordGroup","confirmPasswordGroup","tierSection","tierGroup","termsGroup","actionsGroup","e","section","titleEl","id","label","type","placeholder","value","required","group","labelEl","asterisk","input","errorEl","tier","index","tierOption","radio","titleSpan","descSpan","checked","actions","registerBtn","registerText","loginBtn","field","eventBus","isValid","errorMessage","message","fieldGroup","key","user","error","resolve","loading"],"mappings":"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"}