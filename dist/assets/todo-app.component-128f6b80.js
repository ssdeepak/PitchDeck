import{_ as r,e as n}from"./main-888e55a8.js";class l extends HTMLElement{shadow;todos=[];filter="all";eventListenersSetup=!1;todoListContainer=null;emptyStateElement=null;constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.loadTodos()}connectedCallback(){console.log("Todo App Web Component connected"),this.loadAddTodoComponent().then(()=>{this.renderStaticLayout(),this.setupEventListeners(),this.renderTodoList()})}async loadAddTodoComponent(){try{await r(()=>import("./add-todo.component-c2b7a5e9.js"),["assets/add-todo.component-c2b7a5e9.js","assets/main-888e55a8.js","assets/index-f41f9163.css"]),await r(()=>import("./todo-item.component-174ce962.js"),["assets/todo-item.component-174ce962.js","assets/main-888e55a8.js","assets/index-f41f9163.css"]),console.log("Todo components loaded successfully")}catch(e){console.error("Failed to load todo components:",e)}}disconnectedCallback(){console.log("Todo App Web Component disconnected")}loadTodos(){try{const e=localStorage.getItem("vfs-todos");if(e){const t=JSON.parse(e),o=t.slice(0,50);this.todos=o.map(d=>({...d,createdAt:new Date(d.createdAt)})),console.log(`Loaded ${this.todos.length} todos from localStorage (limited to 50 max)`),t.length>50&&(console.warn(`Found ${t.length} todos, limiting to 50 for performance`),this.saveTodos())}else console.log("No todos found in localStorage")}catch(e){console.warn("Failed to load todos:",e),this.todos=[]}}saveTodos(){try{localStorage.setItem("vfs-todos",JSON.stringify(this.todos))}catch(e){console.error("Failed to save todos:",e)}}render(){}getStyles(){return[':host { display: block; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; background: #f8f9fa; border-radius: 8px; overflow: hidden; }',"[hidden] { display: none !important; }",".todo-app { display: flex; flex-direction: column; height: 100%; }",".todo-content { flex: 1; display: flex; flex-direction: column; padding: 5px; gap: 5px; }",".todo-filters { display: flex; gap: 10px; justify-content: center; margin-bottom: 5px; }",".filter-btn { padding: 8px 16px; border: none; border-radius: 5px; cursor: pointer; font-size: 14px; font-weight: 500; transition: all 0.2s; }",".filter-btn.active { background: #007acc; color: white; }",".filter-btn:not(.active) { background: #e9ecef; color: #495057; }",".filter-btn:not(.active):hover { background: #dee2e6; }",".todo-list { flex: 1; overflow-y: auto; max-height: 300px; }",".todo-empty { text-align: center; color: #6c757d; padding: 40px 5px; }",".todo-empty i { font-size: 48px; margin-bottom: 16px; display: block; opacity: 0.5; }",".todo-stats { background: white; border-radius: 8px; padding: 16px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }",".stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(15px, 1fr)); gap: 16px; }",".stat-item { text-align: center; }",".stat-number { font-size: 24px; font-weight: bold; color: #007acc; }",".stat-label { font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 0.5px; }",".priority-high { border-left: 4px solid #dc3545; }",".priority-medium { border-left: 4px solid #ffc107; }",".priority-low { border-left: 4px solid #28a745; }","@keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }",".todo-item { animation: fadeIn 0.3s ease-out; }"].join(" ")}getTemplate(){return""}renderTodoItem(e){const t=document.createElement("vfs-todo-item");return this.updateTodoItemElement(t,e),t}updateTodoItemElement(e,t){e.setAttribute("todo-id",t.id),e.setAttribute("text",this.escapeHtml(t.text)),e.setAttribute("completed",String(t.completed)),e.setAttribute("priority",t.priority)}setupEventListeners(){if(this.eventListenersSetup)return;this.eventListenersSetup=!0,this.shadow.querySelectorAll(".filter-btn").forEach(t=>{t.addEventListener("click",o=>{const d=o.target.dataset.filter;this.setFilter(d)})}),n.on("todo:toggle",t=>{this.toggleTodo(t.id)}),n.on("todo:delete",t=>{this.deleteTodo(t.id)}),n.on("todo:edit",t=>{this.editTodo(t.id,t.text)}),n.on("todo:add",t=>{this.addTodo(t.text,t.priority)})}getFilteredTodos(){switch(this.filter){case"active":return this.todos.filter(e=>!e.completed);case"completed":return this.todos.filter(e=>e.completed);default:return this.todos}}getStats(){const e=this.todos.length,t=this.todos.filter(i=>i.completed).length,o=e-t,d=e>0?t/e*100:0;return{total:e,active:o,completed:t,completionRate:d}}setFilter(e){this.filter=e,this.updateFilterButtons(),this.renderTodoList()}addTodo(e,t="medium"){if(!e.trim())return;console.log(`Adding todo: "${e}" with priority ${t}`);const o={id:Date.now().toString()+Math.random().toString(36).substr(2,9),text:e.trim(),completed:!1,createdAt:new Date,priority:t};this.todos.unshift(o),this.saveTodos(),this.renderTodoList()}toggleTodo(e){const t=this.todos.find(o=>o.id===e);t&&(t.completed=!t.completed,this.saveTodos(),this.renderTodoList())}editTodo(e,t){const o=this.todos.find(d=>d.id===e);o&&t.trim()&&(o.text=t.trim(),this.saveTodos(),this.renderTodoList())}deleteTodo(e){this.todos=this.todos.filter(t=>t.id!==e),this.saveTodos(),this.renderTodoList()}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}renderStaticLayout(){const e=this.getStyles();this.shadow.innerHTML=`<style>${e}</style>
      <div class="todo-app">
        
        <div class="todo-content">
          <div class="todo-filters">
            <button class="filter-btn ${this.filter==="all"?"active":""}" data-filter="all">All</button>
            <button class="filter-btn ${this.filter==="active"?"active":""}" data-filter="active">Active</button>
            <button class="filter-btn ${this.filter==="completed"?"active":""}" data-filter="completed">Completed</button>
          </div>
          <div class="todo-list"></div>
          <div class="todo-stats"></div>
          <vfs-add-todo></vfs-add-todo>
        </div>
      </div>`,this.todoListContainer=this.shadow.querySelector(".todo-list"),this.todoListContainer&&(this.emptyStateElement=document.createElement("div"),this.emptyStateElement.className="todo-empty",this.emptyStateElement.setAttribute("hidden",""),this.todoListContainer.appendChild(this.emptyStateElement)),this.updateFilterButtons(),this.renderStats()}renderTodoList(){if(!this.todoListContainer&&(this.todoListContainer=this.shadow.querySelector(".todo-list"),!this.todoListContainer))return;const e=this.todoListContainer,t=new Map;e.querySelectorAll("vfs-todo-item").forEach(i=>{const s=i.getAttribute("todo-id");s&&t.set(s,i)});let o=e.firstChild;o===this.emptyStateElement&&(o=this.emptyStateElement);for(const i of this.todos){let s=t.get(i.id);s?(this.updateTodoItemElement(s,i),t.delete(i.id)):s=this.renderTodoItem(i),s!==o&&(s.parentElement!==e||s.nextSibling!==o)&&e.insertBefore(s,o),o=s.nextSibling;const a=this.matchesFilter(i);s.toggleAttribute("hidden",!a)}t.forEach(i=>i.remove());const d=this.todos.some(i=>this.matchesFilter(i));this.updateEmptyState(d),this.updateFilterButtons(),this.renderStats()}renderStats(){const e=this.shadow.querySelector(".todo-stats");if(!e)return;const t=this.getStats();e.innerHTML=`<div class="stats-grid">
      <div class="stat-item"><div class="stat-number">${t.total}</div><div class="stat-label">Total</div></div>
      <div class="stat-item"><div class="stat-number">${t.active}</div><div class="stat-label">Active</div></div>
      <div class="stat-item"><div class="stat-number">${t.completed}</div><div class="stat-label">Completed</div></div>
      <div class="stat-item"><div class="stat-number">${Math.round(t.completionRate)}%</div><div class="stat-label">Done</div></div>
    </div>`}matchesFilter(e){switch(this.filter){case"active":return!e.completed;case"completed":return e.completed;default:return!0}}updateEmptyState(e){if(!this.todoListContainer)return;this.emptyStateElement||(this.emptyStateElement=document.createElement("div"),this.emptyStateElement.className="todo-empty",this.todoListContainer.appendChild(this.emptyStateElement));const t=this.filter==="all"?"Add your first todo below!":"Try a different filter";this.emptyStateElement.innerHTML=`<i>ðŸ“‹</i><div>No todos found</div><div style="font-size: 12px; margin-top: 8px;">${t}</div>`,this.emptyStateElement.toggleAttribute("hidden",e)}updateFilterButtons(){this.shadow.querySelectorAll(".filter-btn").forEach(t=>{const o=t.dataset.filter;t.classList.toggle("active",o===this.filter)})}}customElements.define("vfs-todo-app",l);export{l as TodoAppComponent};
//# sourceMappingURL=todo-app.component-128f6b80.js.map
