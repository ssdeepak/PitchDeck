{"version":3,"mappings":"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CF,EAKaC,EAA8B,CACzC,GAAI,OACJ,KAAM,wBACN,YAAa,wDACb,QAAS,QACT,SAAU,OACV,WAAY,CACV,QACA,WACA,kBACA,iBACA,kBACA,mBACA,mBACA,oBACF,EACA,QAAS,CACP,CACE,GAAI,eACJ,KAAM,UACN,KAAM,cACN,YAAa,iCACf,CACF,CACF,EAKaC,EAA8B,CACzC,GAAI,OACJ,KAAM,cACN,YAAa,8CACb,QAAS,QACT,SAAU,gBACV,WAAY,CACV,cACA,YACA,mBACA,kBACA,cACA,eACA,eACA,gBACA,uBACA,aACA,YACF,CACF,EAKaC,EAAkC,CAC7C,GAAI,WACJ,KAAM,kBACN,YAAa,oDACb,QAAS,QACT,SAAU,SACV,WAAY,CACV,oBACA,qBACA,aACA,cACA,iBACA,oBACA,qBACA,gBACA,qBACA,kBACF,CACF,EAKaC,EAAiC,CAC5C,GAAI,UACJ,KAAM,iBACN,YAAa,uDACb,QAAS,QACT,SAAU,UACV,WAAY,CACV,UACA,UACA,aACA,oBACA,kBACA,cACA,oBACA,kBACF,CACF,EAKaC,EAAkC,CAC7C,GAAI,WACJ,KAAM,uBACN,YAAa,mDACb,QAAS,QACT,SAAU,kBACV,WAAY,CACV,gBACA,cACA,YACA,eACA,cACA,cACA,kBACA,cACA,uBACF,CACF,EAKaC,EAA6B,CACxC,GAAI,MACJ,KAAM,yBACN,YAAa,mDACb,QAAS,QACT,SAAU,kBACV,WAAY,CACV,yBACA,kBACA,wBACA,qBACA,qBACA,iBACA,kBACF,CACF,EAKaC,EAAkC,CAC7C,GAAI,YACJ,KAAM,2BACN,YAAa,4CACb,QAAS,QACT,SAAU,cACV,WAAY,CACV,sBACA,iBACA,uBACA,kBACA,iBACA,yBACA,oBACF,CACF,EAKaC,EAAgC,CAC3C,GAAI,SACJ,KAAM,2BACN,YAAa,qCACb,QAAS,QACT,SAAU,UACV,WAAY,CACV,QACA,UACA,WACA,OACA,YACA,eACA,UACA,eACA,sBACA,eACA,aACA,aACA,aACA,cACA,cACF,CACF,EAKaC,EAAgC,CAC3CT,EACAC,EACAC,EAC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","names":["ServiceContainer","token","constructor","singleton","instance","registration","cachedInstance","initPromises","initPromise","error","destroyPromises","result","serviceContainer","SERVICE_TOKENS","EventBus","event","listener","eventName","eventListeners","args","onceListener","eventBus","WindowManager","id","config","registryEntry","savedConfig","finalConfig","window","windowElement","desktop","componentLoader","contentContainer","component","element","style","titlebar","controls","closeBtn","maxBtn","title","tackBtn","content","handles","handle","resizeHandle","e","isDragging","dragStart","windowStart","startDrag","doDrag","dx","dy","newPosition","endDrag","direction","isResizing","startX","startY","startSize","startPos","doResize","newSize","newPos","endResize","w","visibleWindows","componentInstance","unmountResult","position","size","zIndex","titleElement","tackButton","offset","saved","configs","savedWindows","savedWindow","userConfigService","windowId","DesktopService","osStyle","theme","appId","app","a","windowManager","existingWindow","componentConstructor","contentElement","newTheme","existingIndex","index","category","categories","cat","query","lowerQuery","AuthService","userStr","user","username","password","response","email","role","roles","newToken","updates","currentPassword","newPassword","ThemeService","savedTheme","targetTheme","property","value","ComponentLoaderService","m","name","loader","container","inputs","ComponentClass","WebComponentClass","mountedWebComponent","webComponent","key","newInputs","UserConfigService","headers","windowCount","settingsData","windowsInSettings","windowsAtRoot","updatedSettings","errorMessage","windows","defaultValue","BaseComponent","methodNames","methodName","method","tagName","attributes","type","options","eventListener","classes","className","force","selector","parent","detail","Desktop","initialOSStyle","menuBar","appName","menuItems","statusIcons","themeToggle","osToggle","timeDisplay","authSection","userButton","userIcon","userName","loginButton","registerButton","windowsContainer","dockContainer","dock","dockedApps","dockItem","icon","tooltip","indicator","taskbar","startButton","taskbarApps","systemTray","tray","clock","runningWindows","taskbarItem","iconsArea","label","onClick","iconElement","iconSpan","labelSpan","taskbarTimeDisplay","hours","minutes","ampm","formattedHours","formattedMinutes","existing","toggles","toggle","items","item","isActive","newIndicator","newStyle","ComponentRegistry","metadata","entry","module","components","componentId","comp","tag","loadStartTime","loadingPromise","loadTime","componentsToLoad","b","missing","dep","entries","loadTimes","moduleId","componentRegistry","ComponentScanner","componentRegistrations","word","fullMetadata","createComponentScanner","defaultConfig","adminModule","authModule","chatModule","designerModule","desktopModule","explorerModule","gitModule","devToolsModule","sharedModule","allModules","ComponentDiscoveryService","LoginComponent","__vitePreload","RegisterComponent","FileExplorerComponent","allComponents","registeredCount","windowConfig","registryStats","modules","componentDiscovery","VFSDesktop","desktopContainer","initializeDesktop","resolve","errorDiv"],"sources":["../../src/core/di/service-container.ts","../../src/core/events/event-bus.ts","../../src/windowing/window-manager.ts","../../src/desktop/desktop-service.ts","../../src/auth/auth-service.ts","../../src/services/theme-service.ts","../../src/core/services/component-loader.service.ts","../../src/core/services/user-config.service.ts","../../src/components/base/base-component.ts","../../src/desktop/desktop.ts","../../src/core/component-system/component-registry.ts","../../src/core/component-system/component-scanner.ts","../../src/components/modules.ts","../../src/components/component-discovery.ts","../../src/main.ts"],"sourcesContent":["/**\r\n * Dependency Injection Container for VFS Desktop\r\n * Provides service registration and resolution with lifecycle management\r\n */\r\n\r\nimport type { IService, IServiceContainer, ServiceConstructor } from '../types/index.js';\r\n\r\ninterface ServiceRegistration<T extends IService = IService> {\r\n  constructor?: ServiceConstructor<T>;\r\n  instance?: T | undefined;\r\n  singleton: boolean;\r\n  initialized: boolean;\r\n}\r\n\r\nexport class ServiceContainer implements IServiceContainer {\r\n  private services = new Map<string, ServiceRegistration>();\r\n  private instances = new Map<string, IService>();\r\n\r\n  /**\r\n   * Register a service constructor\r\n   */\r\n  register<T extends IService>(\r\n    token: string, \r\n    constructor: ServiceConstructor<T>,\r\n    singleton = true\r\n  ): void {\r\n    this.services.set(token, {\r\n      constructor,\r\n      singleton,\r\n      initialized: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register a service instance\r\n   */\r\n  registerInstance<T extends IService>(token: string, instance: T): void {\r\n    this.services.set(token, {\r\n      instance,\r\n      singleton: true,\r\n      initialized: true\r\n    } as ServiceRegistration<T>);\r\n    this.instances.set(token, instance);\r\n  }\r\n\r\n  /**\r\n   * Get a service instance\r\n   */\r\n  get<T extends IService>(token: string): T {\r\n    const registration = this.services.get(token);\r\n    if (!registration) {\r\n      throw new Error(`Service not registered: ${token}`);\r\n    }\r\n\r\n    // Return existing instance for singletons\r\n    if (registration.singleton && registration.instance) {\r\n      return registration.instance as T;\r\n    }\r\n\r\n    // Return cached instance\r\n    const cachedInstance = this.instances.get(token);\r\n    if (cachedInstance) {\r\n      return cachedInstance as T;\r\n    }\r\n\r\n    // Create new instance\r\n    if (!registration.constructor) {\r\n      throw new Error(`Service constructor not available: ${token}`);\r\n    }\r\n\r\n    const instance = new registration.constructor() as T;\r\n\r\n    // Cache singleton instances\r\n    if (registration.singleton) {\r\n      registration.instance = instance;\r\n      this.instances.set(token, instance);\r\n    }\r\n\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * Check if a service is registered\r\n   */\r\n  has(token: string): boolean {\r\n    return this.services.has(token);\r\n  }\r\n\r\n  /**\r\n   * Initialize all registered services\r\n   */\r\n  async initializeAll(): Promise<void> {\r\n    const initPromises: Promise<void>[] = [];\r\n\r\n    for (const [token, registration] of this.services) {\r\n      if (!registration.initialized) {\r\n        const initPromise = this.initializeService(token);\r\n        initPromises.push(initPromise);\r\n      }\r\n    }\r\n\r\n    await Promise.all(initPromises);\r\n  }\r\n\r\n  /**\r\n   * Initialize a specific service\r\n   */\r\n  private async initializeService(token: string): Promise<void> {\r\n    const registration = this.services.get(token);\r\n    if (!registration || registration.initialized) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const instance = this.get(token);\r\n      if (instance.initialize) {\r\n        await instance.initialize();\r\n      }\r\n      registration.initialized = true;\r\n    } catch (error) {\r\n      console.error(`Failed to initialize service ${token}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy all services\r\n   */\r\n  async destroyAll(): Promise<void> {\r\n    const destroyPromises: Promise<void>[] = [];\r\n\r\n    for (const instance of this.instances.values()) {\r\n      if (instance.destroy) {\r\n        const result = instance.destroy();\r\n        if (result instanceof Promise) {\r\n          destroyPromises.push(result);\r\n        }\r\n      }\r\n    }\r\n\r\n    await Promise.all(destroyPromises);\r\n    this.instances.clear();\r\n    \r\n    // Reset initialization state\r\n    for (const registration of this.services.values()) {\r\n      registration.initialized = false;\r\n      if (registration.singleton) {\r\n        registration.instance = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all registered service tokens\r\n   */\r\n  getRegisteredServices(): string[] {\r\n    return Array.from(this.services.keys());\r\n  }\r\n\r\n  /**\r\n   * Clear all registrations\r\n   */\r\n  clear(): void {\r\n    this.services.clear();\r\n    this.instances.clear();\r\n  }\r\n}\r\n\r\n// Global service container instance\r\nexport const serviceContainer = new ServiceContainer();\r\n\r\n// Service tokens (constants to avoid typos)\r\nexport const SERVICE_TOKENS = {\r\n  WINDOW_MANAGER: 'WindowManager',\r\n  DESKTOP_SERVICE: 'DesktopService',\r\n  AUTH_SERVICE: 'AuthService',\r\n  FILE_SERVICE: 'FileService',\r\n  COMPONENT_REGISTRY: 'ComponentRegistry',\r\n  COMPONENT_LOADER: 'ComponentLoaderService',\r\n  USER_CONFIG_SERVICE: 'UserConfigService',\r\n  THEME_SERVICE: 'ThemeService',\r\n  ANIMATION_SERVICE: 'AnimationService'\r\n} as const;","/**\r\n * Event Bus implementation for VFS Desktop\r\n * Provides type-safe event handling across the application\r\n */\r\n\r\nimport type { IEventBus, EventListener, EventMap } from '../types/index.js';\r\n\r\nexport class EventBus implements IEventBus {\r\n  private listeners = new Map<string, Set<EventListener>>();\r\n\r\n  /**\r\n   * Subscribe to an event\r\n   */\r\n  on<K extends keyof EventMap>(event: K, listener: EventListener<EventMap[K]>): void {\r\n    const eventName = event as string;\r\n    if (!this.listeners.has(eventName)) {\r\n      this.listeners.set(eventName, new Set());\r\n    }\r\n    this.listeners.get(eventName)!.add(listener);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from an event\r\n   */\r\n  off<K extends keyof EventMap>(event: K, listener: EventListener<EventMap[K]>): void {\r\n    const eventName = event as string;\r\n    const eventListeners = this.listeners.get(eventName);\r\n    if (eventListeners) {\r\n      eventListeners.delete(listener);\r\n      if (eventListeners.size === 0) {\r\n        this.listeners.delete(eventName);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit an event to all subscribers\r\n   */\r\n  emit<K extends keyof EventMap>(event: K, ...args: EventMap[K]): void {\r\n    const eventName = event as string;\r\n    const eventListeners = this.listeners.get(eventName);\r\n    if (eventListeners) {\r\n      for (const listener of eventListeners) {\r\n        try {\r\n          listener(...args);\r\n        } catch (error) {\r\n          console.error(`Error in event listener for ${eventName}:`, error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to an event once - automatically unsubscribes after first emission\r\n   */\r\n  once<K extends keyof EventMap>(event: K, listener: EventListener<EventMap[K]>): void {\r\n    const onceListener = (...args: EventMap[K]) => {\r\n      this.off(event, onceListener);\r\n      listener(...args);\r\n    };\r\n    this.on(event, onceListener);\r\n  }\r\n\r\n  /**\r\n   * Get the number of listeners for an event\r\n   */\r\n  listenerCount(event: keyof EventMap): number {\r\n    const eventName = event as string;\r\n    return this.listeners.get(eventName)?.size ?? 0;\r\n  }\r\n\r\n  /**\r\n   * Remove all listeners for a specific event, or all listeners if no event specified\r\n   */\r\n  removeAllListeners(event?: keyof EventMap): void {\r\n    if (event) {\r\n      this.listeners.delete(event as string);\r\n    } else {\r\n      this.listeners.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all event names that have listeners\r\n   */\r\n  eventNames(): string[] {\r\n    return Array.from(this.listeners.keys());\r\n  }\r\n}\r\n\r\n// Global event bus instance\r\nexport const eventBus = new EventBus();","/**\r\n * Window Manager Service\r\n * Manages window lifecycle, positioning, and state\r\n * Based on Angular WindowManagerService but framework-agnostic\r\n */\r\n\r\nimport type { \r\n  IWindow, \r\n  IWindowManager, \r\n  Position, \r\n  Size, \r\n  WindowRegistryEntry,\r\n  WindowEventMap\r\n} from '../core/types/index.js';\r\nimport { eventBus } from '../core/events/event-bus.js';\r\nimport { serviceContainer, SERVICE_TOKENS } from '../core/di/service-container.js';\r\nimport type { ComponentLoaderService } from '../core/services/component-loader.service.js';\r\nimport type { UserConfigService, SavedWindow } from '../core/services/user-config.service.js';\r\n\r\nexport class WindowManager implements IWindowManager {\r\n  readonly name = 'WindowManager';\r\n  \r\n  private windows = new Map<string, IWindow>();\r\n  private registry = new Map<string, WindowRegistryEntry>();\r\n  private nextZIndex = 1000;\r\n  private activeWindowId: string | null = null;\r\n\r\n  // Debouncing for config saves\r\n  private saveConfigTimeout: number | null = null;\r\n  private readonly saveConfigDebounceMs = 1000; // Wait 1 second after last change\r\n\r\n  /**\r\n   * Initialize the window manager\r\n   */\r\n  async initialize(): Promise<void> {\r\n    console.log('Initializing Window Manager...');\r\n    \r\n    // Register default window types\r\n    this.registerDefaultWindows();\r\n    \r\n    // Setup user config integration\r\n    this.setupUserConfigIntegration();\r\n    \r\n    console.log('Window Manager initialized');\r\n  }\r\n\r\n  /**\r\n   * Register default window types\r\n   */\r\n  private registerDefaultWindows(): void {\r\n    // Login window\r\n    this.registerWindow('login', {\r\n      defaultTitle: 'Login',\r\n      defaultSize: { width: 400, height: 300 },\r\n      defaultPosition: { x: 100, y: 100 },\r\n      minSize: { width: 350, height: 250 },\r\n      category: 'authentication',\r\n      isDocked: false,\r\n      isResizable: true,\r\n      isDraggable: true\r\n    });\r\n\r\n    // Register window\r\n    this.registerWindow('register', {\r\n      defaultTitle: 'Create Account',\r\n      defaultSize: { width: 450, height: 350 },\r\n      defaultPosition: { x: 150, y: 150 },\r\n      minSize: { width: 400, height: 300 },\r\n      category: 'authentication',\r\n      isDocked: false,\r\n      isResizable: true,\r\n      isDraggable: true\r\n    });\r\n\r\n    // File explorer\r\n    this.registerWindow('file-explorer', {\r\n      defaultTitle: 'File Explorer',\r\n      defaultSize: { width: 800, height: 600 },\r\n      defaultPosition: { x: 200, y: 100 },\r\n      minSize: { width: 400, height: 300 },\r\n      category: 'file-management',\r\n      isDocked: true,\r\n      isResizable: true,\r\n      isDraggable: true\r\n    });\r\n\r\n    // Test Web Component\r\n    this.registerWindow('test-web-component', {\r\n      defaultTitle: 'Test Web Component',\r\n      defaultSize: { width: 500, height: 400 },\r\n      defaultPosition: { x: 250, y: 150 },\r\n      minSize: { width: 400, height: 300 },\r\n      category: 'development',\r\n      isDocked: false,\r\n      isResizable: true,\r\n      isDraggable: true\r\n    });\r\n\r\n    // Todo App\r\n    this.registerWindow('todo-app', {\r\n      defaultTitle: 'Todo App',\r\n      defaultSize: { width: 700, height: 800 },\r\n      defaultPosition: { x: 300, y: 100 },\r\n      minSize: { width: 500, height: 400 },\r\n      category: 'productivity',\r\n      isDocked: false,\r\n      isResizable: true,\r\n      isDraggable: true\r\n    });\r\n\r\n    console.log('Default windows registered');\r\n  }\r\n\r\n  /**\r\n   * Register a window type\r\n   */\r\n  registerWindow(id: string, config: WindowRegistryEntry): void {\r\n    this.registry.set(id, config);\r\n  }\r\n\r\n  /**\r\n   * Create a new window\r\n   */\r\n  async createWindow(id: string, config: Partial<IWindow> = {}): Promise<IWindow> {\r\n    if (this.windows.has(id)) {\r\n      console.warn(`Window with id '${id}' already exists`);\r\n      return this.windows.get(id)!;\r\n    }\r\n\r\n    const registryEntry = this.registry.get(id);\r\n    if (!registryEntry) {\r\n      throw new Error(`Window type '${id}' not registered`);\r\n    }\r\n\r\n    // Check for saved user configuration first\r\n    const savedConfig = await this.getSavedWindowConfig(id);\r\n    \r\n    // Merge configurations with priority: savedConfig > passed config > registry defaults\r\n    const finalConfig = {\r\n      ...registryEntry,\r\n      ...(savedConfig && {\r\n        position: savedConfig.position,\r\n        size: savedConfig.size,\r\n        isMinimized: savedConfig.isMinimized,\r\n        isFullscreen: savedConfig.isFullscreen,\r\n        isTack: savedConfig.isTack,\r\n        title: savedConfig.title || registryEntry.defaultTitle\r\n      }),\r\n      ...config\r\n    };\r\n\r\n    // Create window with merged configuration\r\n    const window: IWindow = {\r\n      id,\r\n      title: finalConfig.title ?? finalConfig.defaultTitle,\r\n      component: finalConfig.component ?? undefined,\r\n      componentInputs: finalConfig.componentInputs ?? undefined,\r\n      position: finalConfig.position ?? finalConfig.defaultPosition ?? this.getDefaultPosition(),\r\n      size: finalConfig.size ?? finalConfig.defaultSize,\r\n      minSize: finalConfig.minSize,\r\n      maxSize: finalConfig.maxSize ?? undefined,\r\n      isActive: false,\r\n      isMinimized: finalConfig.isMinimized ?? false,\r\n      isFullscreen: finalConfig.isFullscreen ?? false,\r\n      isTack: finalConfig.isTack ?? false,\r\n      zIndex: this.nextZIndex++,\r\n      isResizable: finalConfig.isResizable ?? true,\r\n      isDraggable: finalConfig.isDraggable ?? true,\r\n      category: finalConfig.category ?? undefined\r\n    };\r\n\r\n    this.windows.set(id, window);\r\n\r\n    // Create DOM element for window\r\n    await this.createWindowElement(window);\r\n\r\n    // Activate the new window\r\n    this.activateWindow(id);\r\n\r\n    // Emit window created event\r\n    eventBus.emit('window:created', window);\r\n\r\n    console.log(`Window '${id}' created with ${savedConfig ? 'saved' : 'default'} configuration`);\r\n    return window;\r\n  }\r\n\r\n  /**\r\n   * Create DOM element for window\r\n   */\r\n  private async createWindowElement(window: IWindow): Promise<void> {\r\n    const windowElement = document.createElement('div');\r\n    windowElement.id = `window-${window.id}`;\r\n    windowElement.className = 'window';\r\n    windowElement.dataset.windowId = window.id;\r\n\r\n    // Apply initial styles\r\n    this.applyWindowStyles(windowElement, window);\r\n\r\n    // Create window structure\r\n    this.createWindowStructure(windowElement, window);\r\n\r\n    // Add to desktop container\r\n    const desktop = document.querySelector('.desktop-container');\r\n    if (desktop) {\r\n      desktop.appendChild(windowElement);\r\n    } else {\r\n      console.error('Desktop container not found');\r\n    }\r\n\r\n    // Load component if needed\r\n    await this.loadWindowComponent(window);\r\n  }\r\n\r\n  /**\r\n   * Load and mount component for window\r\n   */\r\n  private async loadWindowComponent(window: IWindow): Promise<void> {\r\n    try {\r\n      const componentLoader = serviceContainer.get<ComponentLoaderService>(SERVICE_TOKENS.COMPONENT_LOADER);\r\n      \r\n      // Check if we should load a component for this window type\r\n      if (componentLoader.hasComponent(window.id)) {\r\n        const contentContainer = document.getElementById(`window-content-${window.id}`);\r\n        if (!contentContainer) {\r\n          console.error(`Content container not found for window '${window.id}'`);\r\n          return;\r\n        }\r\n\r\n        // Load and mount the component\r\n        const component = await componentLoader.loadComponent(\r\n          window.id, \r\n          contentContainer, \r\n          window.componentInputs\r\n        );\r\n        \r\n        if (component) {\r\n          await component.mount();\r\n          console.log(`Component loaded for window '${window.id}'`);\r\n          \r\n          // Store component reference on window for cleanup later\r\n          (window as any).componentInstance = component;\r\n        }\r\n      } else {\r\n        console.log(`No component registered for window type '${window.id}'`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Failed to load component for window '${window.id}':`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply styles to window element\r\n   */\r\n  private applyWindowStyles(element: HTMLElement, window: IWindow): void {\r\n    const style = element.style;\r\n    style.position = 'absolute';\r\n    style.left = `${window.position.x}px`;\r\n    style.top = `${window.position.y}px`;\r\n    style.width = `${window.size.width}px`;\r\n    style.height = `${window.size.height}px`;\r\n    style.zIndex = window.zIndex.toString();\r\n    style.display = window.isMinimized ? 'none' : 'flex';\r\n    \r\n    // Add CSS classes for states\r\n    element.classList.toggle('active', window.isActive);\r\n    element.classList.toggle('fullscreen', window.isFullscreen);\r\n    element.classList.toggle('minimized', window.isMinimized);\r\n  }\r\n\r\n  /**\r\n   * Create window structure (titlebar, content, resize handles)\r\n   */\r\n  private createWindowStructure(element: HTMLElement, window: IWindow): void {\r\n    // Window titlebar\r\n    const titlebar = document.createElement('div');\r\n    titlebar.className = 'window-titlebar';\r\n    \r\n    // macOS-style controls\r\n    const controls = document.createElement('div');\r\n    controls.className = 'window-controls macos-controls';\r\n    \r\n    // Close button\r\n    const closeBtn = document.createElement('button');\r\n    closeBtn.className = 'window-control close';\r\n    closeBtn.addEventListener('click', () => this.closeWindow(window.id));\r\n    controls.appendChild(closeBtn);\r\n    \r\n    // Maximize button\r\n    const maxBtn = document.createElement('button');\r\n    maxBtn.className = 'window-control maximize';\r\n    maxBtn.addEventListener('click', () => this.toggleFullscreen(window.id));\r\n    controls.appendChild(maxBtn);\r\n    \r\n    titlebar.appendChild(controls);\r\n    \r\n    // Window title\r\n    const title = document.createElement('div');\r\n    title.className = 'window-title';\r\n    title.textContent = window.title;\r\n    titlebar.appendChild(title);\r\n    \r\n    // Tack button\r\n    const tackBtn = document.createElement('button');\r\n    tackBtn.className = 'window-control tack';\r\n    tackBtn.addEventListener('click', () => this.toggleTack(window.id));\r\n    titlebar.appendChild(tackBtn);\r\n    \r\n    element.appendChild(titlebar);\r\n    \r\n    // Window content\r\n    const content = document.createElement('div');\r\n    content.className = 'window-content';\r\n    content.id = `window-content-${window.id}`;\r\n    element.appendChild(content);\r\n    \r\n    // Add resize handles\r\n    if (window.isResizable) {\r\n      this.addResizeHandles(element, window);\r\n    }\r\n    \r\n    // Add drag functionality\r\n    if (window.isDraggable) {\r\n      this.addDragFunctionality(titlebar, window);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add resize handles to window\r\n   */\r\n  private addResizeHandles(element: HTMLElement, window: IWindow): void {\r\n    const handles = ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'];\r\n    \r\n    for (const handle of handles) {\r\n      const resizeHandle = document.createElement('div');\r\n      resizeHandle.className = `resize-handle resize-${handle}`;\r\n      resizeHandle.addEventListener('mousedown', (e) => this.startResize(e, window, handle));\r\n      element.appendChild(resizeHandle);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add drag functionality to titlebar\r\n   */\r\n  private addDragFunctionality(titlebar: HTMLElement, window: IWindow): void {\r\n    let isDragging = false;\r\n    let dragStart = { x: 0, y: 0 };\r\n    let windowStart = { x: 0, y: 0 };\r\n\r\n    const startDrag = (e: MouseEvent) => {\r\n      if (window.isFullscreen) return;\r\n      \r\n      isDragging = true;\r\n      dragStart = { x: e.clientX, y: e.clientY };\r\n      windowStart = { ...window.position };\r\n      \r\n      this.activateWindow(window.id);\r\n      e.preventDefault();\r\n    };\r\n\r\n    const doDrag = (e: MouseEvent) => {\r\n      if (!isDragging) return;\r\n      \r\n      const dx = e.clientX - dragStart.x;\r\n      const dy = e.clientY - dragStart.y;\r\n      \r\n      const newPosition = {\r\n        x: windowStart.x + dx,\r\n        y: Math.max(0, windowStart.y + dy) // Don't go above menu bar\r\n      };\r\n      \r\n      this.moveWindow(window.id, newPosition);\r\n    };\r\n\r\n    const endDrag = () => {\r\n      if (isDragging) {\r\n        isDragging = false;\r\n        // Use the debounced save that integrates with UserConfigService\r\n        this.debouncedSaveWindowConfigurations();\r\n      }\r\n    };\r\n\r\n    titlebar.addEventListener('mousedown', startDrag);\r\n    document.addEventListener('mousemove', doDrag);\r\n    document.addEventListener('mouseup', endDrag);\r\n\r\n    // Double-click to toggle fullscreen\r\n    titlebar.addEventListener('dblclick', () => this.toggleFullscreen(window.id));\r\n  }\r\n\r\n  /**\r\n   * Start window resize\r\n   */\r\n  private startResize(e: MouseEvent, window: IWindow, direction: string): void {\r\n    if (window.isFullscreen) return;\r\n\r\n    let isResizing = true;\r\n    const startX = e.clientX;\r\n    const startY = e.clientY;\r\n    const startSize = { ...window.size };\r\n    const startPos = { ...window.position };\r\n\r\n    const doResize = (e: MouseEvent) => {\r\n      if (!isResizing) return;\r\n\r\n      const dx = e.clientX - startX;\r\n      const dy = e.clientY - startY;\r\n\r\n      let newSize = { ...startSize };\r\n      let newPos = { ...startPos };\r\n\r\n      // Calculate new size and position based on resize direction\r\n      switch (direction) {\r\n        case 'e':\r\n          newSize.width = Math.max(window.minSize.width, startSize.width + dx);\r\n          break;\r\n        case 'w':\r\n          newSize.width = Math.max(window.minSize.width, startSize.width - dx);\r\n          newPos.x = startPos.x + (startSize.width - newSize.width);\r\n          break;\r\n        case 's':\r\n          newSize.height = Math.max(window.minSize.height, startSize.height + dy);\r\n          break;\r\n        case 'n':\r\n          newSize.height = Math.max(window.minSize.height, startSize.height - dy);\r\n          newPos.y = Math.max(0, startPos.y + (startSize.height - newSize.height));\r\n          break;\r\n        case 'se':\r\n          newSize.width = Math.max(window.minSize.width, startSize.width + dx);\r\n          newSize.height = Math.max(window.minSize.height, startSize.height + dy);\r\n          break;\r\n        case 'sw':\r\n          newSize.width = Math.max(window.minSize.width, startSize.width - dx);\r\n          newSize.height = Math.max(window.minSize.height, startSize.height + dy);\r\n          newPos.x = startPos.x + (startSize.width - newSize.width);\r\n          break;\r\n        case 'ne':\r\n          newSize.width = Math.max(window.minSize.width, startSize.width + dx);\r\n          newSize.height = Math.max(window.minSize.height, startSize.height - dy);\r\n          newPos.y = Math.max(0, startPos.y + (startSize.height - newSize.height));\r\n          break;\r\n        case 'nw':\r\n          newSize.width = Math.max(window.minSize.width, startSize.width - dx);\r\n          newSize.height = Math.max(window.minSize.height, startSize.height - dy);\r\n          newPos.x = startPos.x + (startSize.width - newSize.width);\r\n          newPos.y = Math.max(0, startPos.y + (startSize.height - newSize.height));\r\n          break;\r\n      }\r\n\r\n      this.resizeWindow(window.id, newSize);\r\n      if (newPos.x !== window.position.x || newPos.y !== window.position.y) {\r\n        this.moveWindow(window.id, newPos);\r\n      }\r\n    };\r\n\r\n    const endResize = () => {\r\n      if (isResizing) {\r\n        isResizing = false;\r\n        // Use the debounced save that integrates with UserConfigService\r\n        this.debouncedSaveWindowConfigurations();\r\n        document.removeEventListener('mousemove', doResize);\r\n        document.removeEventListener('mouseup', endResize);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousemove', doResize);\r\n    document.addEventListener('mouseup', endResize);\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Get a window by ID\r\n   */\r\n  getWindow(id: string): IWindow | undefined {\r\n    return this.windows.get(id);\r\n  }\r\n\r\n  /**\r\n   * Get all windows\r\n   */\r\n  getAllWindows(): IWindow[] {\r\n    return Array.from(this.windows.values());\r\n  }\r\n\r\n  /**\r\n   * Get visible windows\r\n   */\r\n  getVisibleWindows(): IWindow[] {\r\n    return this.getAllWindows().filter(w => !w.isMinimized);\r\n  }\r\n\r\n  /**\r\n   * Get minimized windows\r\n   */\r\n  getMinimizedWindows(): IWindow[] {\r\n    return this.getAllWindows().filter(w => w.isMinimized);\r\n  }\r\n\r\n  /**\r\n   * Activate a window\r\n   */\r\n  activateWindow(id: string): void {\r\n    const window = this.windows.get(id);\r\n    if (!window) return;\r\n\r\n    // Deactivate all other windows\r\n    for (const w of this.windows.values()) {\r\n      if (w.id !== id && w.isActive) {\r\n        w.isActive = false;\r\n        this.updateWindowElement(w);\r\n      }\r\n    }\r\n\r\n    // Activate target window\r\n    window.isActive = true;\r\n    window.zIndex = this.nextZIndex++;\r\n    this.activeWindowId = id;\r\n\r\n    this.updateWindowElement(window);\r\n    eventBus.emit('window:activated', window);\r\n  }\r\n\r\n  /**\r\n   * Minimize a window\r\n   */\r\n  minimizeWindow(id: string): void {\r\n    const window = this.windows.get(id);\r\n    if (!window) return;\r\n\r\n    window.isMinimized = true;\r\n    window.isActive = false;\r\n\r\n    this.updateWindowElement(window);\r\n    eventBus.emit('window:minimized', window);\r\n\r\n    // Activate next window\r\n    const visibleWindows = this.getVisibleWindows();\r\n    if (visibleWindows.length > 0 && visibleWindows[0]) {\r\n      this.activateWindow(visibleWindows[0].id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maximize/restore a window\r\n   */\r\n  maximizeWindow(id: string): void {\r\n    this.toggleFullscreen(id);\r\n  }\r\n\r\n  /**\r\n   * Toggle fullscreen state\r\n   */\r\n  toggleFullscreen(id: string): void {\r\n    const window = this.windows.get(id);\r\n    if (!window) return;\r\n\r\n    window.isFullscreen = !window.isFullscreen;\r\n    this.updateWindowElement(window);\r\n\r\n    if (window.isFullscreen) {\r\n      eventBus.emit('window:maximized', window);\r\n    } else {\r\n      eventBus.emit('window:restored', window);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle tack (pin) state\r\n   */\r\n  toggleTack(id: string): void {\r\n    const window = this.windows.get(id);\r\n    if (!window) return;\r\n\r\n    window.isTack = !window.isTack;\r\n    this.updateWindowElement(window);\r\n  }\r\n\r\n  /**\r\n   * Close a window\r\n   */\r\n  closeWindow(id: string): void {\r\n    const window = this.windows.get(id);\r\n    if (!window) return;\r\n\r\n    // Clean up component if it exists\r\n    const componentInstance = (window as any).componentInstance;\r\n    if (componentInstance && typeof componentInstance.unmount === 'function') {\r\n      try {\r\n        const unmountResult = componentInstance.unmount();\r\n        // Handle both synchronous and asynchronous unmount\r\n        if (unmountResult && typeof unmountResult.catch === 'function') {\r\n          unmountResult.catch((error: Error) => {\r\n            console.error(`Error unmounting component for window '${id}':`, error);\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error unmounting component for window '${id}':`, error);\r\n      }\r\n    }\r\n\r\n    // Remove DOM element\r\n    const element = document.getElementById(`window-${id}`);\r\n    if (element) {\r\n      element.remove();\r\n    }\r\n\r\n    // Remove from windows map\r\n    this.windows.delete(id);\r\n\r\n    eventBus.emit('window:closed', window);\r\n\r\n    // Activate next window\r\n    if (this.activeWindowId === id) {\r\n      this.activeWindowId = null;\r\n      const visibleWindows = this.getVisibleWindows();\r\n      if (visibleWindows.length > 0 && visibleWindows[0]) {\r\n        this.activateWindow(visibleWindows[0].id);\r\n      }\r\n    }\r\n\r\n    console.log(`Window '${id}' closed`);\r\n  }\r\n\r\n  /**\r\n   * Move a window\r\n   */\r\n  moveWindow(id: string, position: Position): void {\r\n    const window = this.windows.get(id);\r\n    if (!window) return;\r\n\r\n    window.position = position;\r\n    this.updateWindowElement(window);\r\n    eventBus.emit('window:moved', window, position);\r\n  }\r\n\r\n  /**\r\n   * Resize a window\r\n   */\r\n  resizeWindow(id: string, size: Size): void {\r\n    const window = this.windows.get(id);\r\n    if (!window) return;\r\n\r\n    window.size = size;\r\n    this.updateWindowElement(window);\r\n    eventBus.emit('window:resized', window, size);\r\n  }\r\n\r\n  /**\r\n   * Set window z-index\r\n   */\r\n  setWindowZIndex(id: string, zIndex: number): void {\r\n    const window = this.windows.get(id);\r\n    if (!window) return;\r\n\r\n    window.zIndex = zIndex;\r\n    this.updateWindowElement(window);\r\n  }\r\n\r\n  /**\r\n   * Update window DOM element\r\n   */\r\n  private updateWindowElement(window: IWindow): void {\r\n    const element = document.getElementById(`window-${window.id}`);\r\n    if (!element) return;\r\n\r\n    this.applyWindowStyles(element, window);\r\n\r\n    // Update title\r\n    const titleElement = element.querySelector('.window-title');\r\n    if (titleElement) {\r\n      titleElement.textContent = window.title;\r\n    }\r\n\r\n    // Update tack button state\r\n    const tackButton = element.querySelector('.window-control.tack');\r\n    if (tackButton) {\r\n      tackButton.classList.toggle('pinned', window.isTack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get default position for new windows\r\n   */\r\n  private getDefaultPosition(): Position {\r\n    const offset = this.windows.size * 30;\r\n    return { x: 100 + offset, y: 100 + offset };\r\n  }\r\n\r\n  /**\r\n   * Load window configurations from localStorage\r\n   */\r\n  private loadWindowConfigurations(): void {\r\n    try {\r\n      const saved = localStorage.getItem('vfs-window-configs');\r\n      if (saved) {\r\n        const configs = JSON.parse(saved);\r\n        console.log('Loaded window configurations from storage');\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to load window configurations:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save window configuration to localStorage\r\n   */\r\n  private saveWindowConfiguration(id: string): void {\r\n    try {\r\n      const window = this.windows.get(id);\r\n      if (!window) return;\r\n\r\n      const saved = localStorage.getItem('vfs-window-configs') || '{}';\r\n      const configs = JSON.parse(saved);\r\n      \r\n      configs[id] = {\r\n        position: window.position,\r\n        size: window.size,\r\n        isFullscreen: window.isFullscreen\r\n      };\r\n\r\n      localStorage.setItem('vfs-window-configs', JSON.stringify(configs));\r\n    } catch (error) {\r\n      console.warn('Failed to save window configuration:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get window registry\r\n   */\r\n  getWindowRegistry(): Map<string, WindowRegistryEntry> {\r\n    return this.registry;\r\n  }\r\n\r\n  /**\r\n   * Setup user config integration\r\n   */\r\n  private setupUserConfigIntegration(): void {\r\n    try {\r\n      // Listen for user config events\r\n      eventBus.on('userconfig:loaded', () => this.restoreWindowsFromConfig());\r\n      eventBus.on('auth:logout', () => this.clearWindowState());\r\n\r\n      // Save window configurations when windows change (debounced)\r\n      eventBus.on('window:moved', () => this.debouncedSaveWindowConfigurations());\r\n      eventBus.on('window:resized', () => this.debouncedSaveWindowConfigurations());\r\n      eventBus.on('window:closed', () => this.debouncedSaveWindowConfigurations());\r\n\r\n      console.log('Window Manager: User config integration setup complete');\r\n    } catch (error) {\r\n      console.warn('Window Manager: Failed to setup user config integration:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore windows from user configuration\r\n   */\r\n  private async restoreWindowsFromConfig(): Promise<void> {\r\n    try {\r\n      const userConfigService = serviceContainer.get<UserConfigService>(SERVICE_TOKENS.USER_CONFIG_SERVICE);\r\n      const savedWindows = userConfigService.getSavedWindows();\r\n\r\n      if (savedWindows.length > 0) {\r\n        console.log(`Window Manager: Restoring ${savedWindows.length} windows from config`);\r\n\r\n        for (const savedWindow of savedWindows) {\r\n          // Only restore windows that aren't already open\r\n          if (!this.windows.has(savedWindow.id)) {\r\n            try {\r\n              await this.createWindow(savedWindow.id, {\r\n                ...(savedWindow.title && { title: savedWindow.title }),\r\n                position: savedWindow.position,\r\n                size: savedWindow.size,\r\n                ...(savedWindow.isMinimized !== undefined && { isMinimized: savedWindow.isMinimized }),\r\n                ...(savedWindow.isFullscreen !== undefined && { isFullscreen: savedWindow.isFullscreen }),\r\n                ...(savedWindow.isTack !== undefined && { isTack: savedWindow.isTack }),\r\n                ...(savedWindow.componentInputs && { componentInputs: savedWindow.componentInputs })\r\n              });\r\n            } catch (error) {\r\n              console.warn(`Failed to restore window '${savedWindow.id}':`, error);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn('Window Manager: Failed to restore windows from config:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save current window configurations to user config\r\n   */\r\n  private async saveWindowConfigurations(): Promise<void> {\r\n    try {\r\n      const userConfigService = serviceContainer.get<UserConfigService>(SERVICE_TOKENS.USER_CONFIG_SERVICE);\r\n\r\n      const savedWindows: SavedWindow[] = [];\r\n\r\n      for (const window of this.windows.values()) {\r\n        savedWindows.push({\r\n          id: window.id,\r\n          title: window.title,\r\n          position: window.position,\r\n          size: window.size,\r\n          minSize: window.minSize,\r\n          zIndex: window.zIndex,\r\n          isMinimized: window.isMinimized,\r\n          isFullscreen: window.isFullscreen,\r\n          isTack: window.isTack,\r\n          componentInputs: window.componentInputs || {}\r\n        });\r\n      }\r\n\r\n      await userConfigService.saveWindowConfig(savedWindows);\r\n      console.log(`Window Manager: Saved ${savedWindows.length} window configurations to UserConfig`);\r\n    } catch (error) {\r\n      console.warn('Window Manager: Failed to save window configurations:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Debounced save to prevent too many requests during window operations\r\n   */\r\n  private debouncedSaveWindowConfigurations(): void {\r\n    // Only log occasionally to avoid console spam\r\n    if (!this.saveConfigTimeout) {\r\n      console.log('Window Manager: Debounced save triggered');\r\n    }\r\n    \r\n    // Clear existing timeout\r\n    if (this.saveConfigTimeout !== null) {\r\n      clearTimeout(this.saveConfigTimeout);\r\n    }\r\n\r\n    // Set new timeout\r\n    this.saveConfigTimeout = window.setTimeout(() => {\r\n      this.saveWindowConfigurations().catch(error => {\r\n        console.warn('Debounced save failed:', error);\r\n      });\r\n      this.saveConfigTimeout = null;\r\n    }, this.saveConfigDebounceMs);\r\n  }\r\n\r\n  /**\r\n   * Clear window state (on logout)\r\n   */\r\n  private clearWindowState(): void {\r\n    // Close all windows but don't save the state\r\n    for (const id of this.windows.keys()) {\r\n      this.closeWindow(id);\r\n    }\r\n    console.log('Window Manager: Window state cleared');\r\n  }\r\n\r\n  /**\r\n   * Get saved window configuration for a specific window ID\r\n   */\r\n  private async getSavedWindowConfig(windowId: string): Promise<SavedWindow | null> {\r\n    try {\r\n      const userConfigService = serviceContainer.get<UserConfigService>(SERVICE_TOKENS.USER_CONFIG_SERVICE);\r\n      const savedWindows = userConfigService.getSavedWindows();\r\n      \r\n      const savedWindow = savedWindows.find(w => w.id === windowId);\r\n      if (savedWindow) {\r\n        console.log(`Window Manager: Found saved config for '${windowId}':`, savedWindow);\r\n      } else {\r\n        console.log(`Window Manager: No saved config found for '${windowId}'`);\r\n      }\r\n      return savedWindow || null;\r\n    } catch (error) {\r\n      console.warn(`Failed to get saved config for window '${windowId}':`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy the window manager\r\n   */\r\n  async destroy(): Promise<void> {\r\n    // Clear any pending debounced save\r\n    if (this.saveConfigTimeout !== null) {\r\n      clearTimeout(this.saveConfigTimeout);\r\n      this.saveConfigTimeout = null;\r\n    }\r\n\r\n    // Clean up event listeners\r\n    eventBus.off('userconfig:loaded', this.restoreWindowsFromConfig);\r\n    eventBus.off('auth:logout', this.clearWindowState);\r\n    eventBus.off('window:moved', this.debouncedSaveWindowConfigurations);\r\n    eventBus.off('window:resized', this.debouncedSaveWindowConfigurations);\r\n    eventBus.off('window:closed', this.debouncedSaveWindowConfigurations);\r\n\r\n    // Close all windows\r\n    for (const id of this.windows.keys()) {\r\n      this.closeWindow(id);\r\n    }\r\n\r\n    this.windows.clear();\r\n    this.registry.clear();\r\n    this.activeWindowId = null;\r\n\r\n    console.log('Window Manager destroyed');\r\n  }\r\n}","/**\r\n * Desktop Service\r\n * Manages desktop applications, OS style, and desktop-level functionality\r\n */\r\n\r\nimport type { \r\n  IDesktopService, \r\n  DesktopApp, \r\n  OSStyle, \r\n  Theme \r\n} from '../core/types/index.js';\r\nimport { eventBus } from '../core/events/event-bus.js';\r\nimport { serviceContainer, SERVICE_TOKENS } from '../core/di/service-container.js';\r\nimport type { IWindowManager } from '../core/types/index.js';\r\n\r\nexport class DesktopService implements IDesktopService {\r\n  readonly name = 'DesktopService';\r\n  \r\n  private apps: DesktopApp[] = [];\r\n  private osStyle: OSStyle = 'macos';\r\n  private theme: Theme = 'light';\r\n\r\n  /**\r\n   * Initialize the desktop service\r\n   */\r\n  async initialize(): Promise<void> {\r\n    console.log('Initializing Desktop Service...');\r\n    \r\n    // Load preferences from localStorage\r\n    this.loadPreferences();\r\n    \r\n    // Register default apps\r\n    this.registerDefaultApps();\r\n    \r\n    console.log('Desktop Service initialized');\r\n  }\r\n\r\n  /**\r\n   * Load user preferences from localStorage\r\n   */\r\n  private loadPreferences(): void {\r\n    try {\r\n      const osStyle = localStorage.getItem('vfs-os-style') as OSStyle;\r\n      if (osStyle === 'macos' || osStyle === 'windows') {\r\n        this.osStyle = osStyle;\r\n      }\r\n\r\n      const theme = localStorage.getItem('vfs-theme') as Theme;\r\n      if (theme === 'light' || theme === 'dark') {\r\n        this.theme = theme;\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to load preferences:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register default desktop applications\r\n   */\r\n  private registerDefaultApps(): void {\r\n    this.apps = [\r\n      {\r\n        id: 'file-explorer',\r\n        name: 'File Explorer',\r\n        icon: 'folder',\r\n        category: 'file-management'\r\n      },\r\n      {\r\n        id: 'login',\r\n        name: 'Login',\r\n        icon: 'login',\r\n        category: 'authentication'\r\n      },\r\n      {\r\n        id: 'register',\r\n        name: 'Register',\r\n        icon: 'person_add',\r\n        category: 'authentication'\r\n      },\r\n      {\r\n        id: 'settings',\r\n        name: 'Settings',\r\n        icon: 'settings',\r\n        category: 'system'\r\n      },\r\n      {\r\n        id: 'terminal',\r\n        name: 'Terminal',\r\n        icon: 'terminal',\r\n        category: 'development'\r\n      },\r\n      {\r\n        id: 'text-editor',\r\n        name: 'Text Editor',\r\n        icon: 'edit',\r\n        category: 'productivity'\r\n      },\r\n      {\r\n        id: 'calculator',\r\n        name: 'Calculator',\r\n        icon: 'calculate',\r\n        category: 'utilities'\r\n      },\r\n      {\r\n        id: 'chat',\r\n        name: 'Chat',\r\n        icon: 'chat',\r\n        category: 'communication'\r\n      },\r\n      {\r\n        id: 'test-web-component',\r\n        name: 'Test Web Component',\r\n        icon: 'code',\r\n        category: 'development'\r\n      },\r\n      {\r\n        id: 'todo-app',\r\n        name: 'Todo App',\r\n        icon: 'check_circle',\r\n        category: 'productivity'\r\n      }\r\n    ];\r\n\r\n    console.log(`Registered ${this.apps.length} desktop applications`);\r\n  }\r\n\r\n  /**\r\n   * Get all registered desktop applications\r\n   */\r\n  getApps(): DesktopApp[] {\r\n    return [...this.apps];\r\n  }\r\n\r\n  /**\r\n   * Launch an application by ID\r\n   */\r\n  async launchApp(appId: string): Promise<void> {\r\n    const app = this.apps.find(a => a.id === appId);\r\n    if (!app) {\r\n      throw new Error(`Application '${appId}' not found`);\r\n    }\r\n\r\n    try {\r\n      // Get window manager\r\n      const windowManager = serviceContainer.get<IWindowManager>(SERVICE_TOKENS.WINDOW_MANAGER);\r\n      \r\n      // Check if window already exists\r\n      const existingWindow = windowManager.getWindow(appId);\r\n      if (existingWindow) {\r\n        // If minimized, restore it\r\n        if (existingWindow.isMinimized) {\r\n          windowManager.activateWindow(appId);\r\n        } else {\r\n          // Just activate the existing window\r\n          windowManager.activateWindow(appId);\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Create new window for the app\r\n      const window = await windowManager.createWindow(appId, {\r\n        title: app.name\r\n      });\r\n\r\n      // Load app component if available\r\n      if (app.component) {\r\n        await this.loadAppComponent(window.id, app.component);\r\n      }\r\n\r\n      // Emit app launched event\r\n      eventBus.emit('desktop:app-launched', appId, app);\r\n      \r\n      console.log(`Launched application: ${app.name}`);\r\n\r\n    } catch (error) {\r\n      console.error(`Failed to launch application '${appId}':`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load component for an app window\r\n   */\r\n  private async loadAppComponent(windowId: string, componentConstructor: any): Promise<void> {\r\n    try {\r\n      const contentElement = document.getElementById(`window-content-${windowId}`);\r\n      if (!contentElement) {\r\n        throw new Error(`Window content element not found for window '${windowId}'`);\r\n      }\r\n\r\n      // Create component instance\r\n      const component = new componentConstructor(contentElement);\r\n      \r\n      // Mount the component\r\n      if (component.mount) {\r\n        await component.mount();\r\n      }\r\n\r\n      console.log(`Component loaded for window '${windowId}'`);\r\n\r\n    } catch (error) {\r\n      console.error(`Failed to load component for window '${windowId}':`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if an application is currently active (has an open window)\r\n   */\r\n  isAppActive(appId: string): boolean {\r\n    const windowManager = serviceContainer.get<IWindowManager>(SERVICE_TOKENS.WINDOW_MANAGER);\r\n    const window = windowManager.getWindow(appId);\r\n    return window !== undefined && !window.isMinimized;\r\n  }\r\n\r\n  /**\r\n   * Get current OS style\r\n   */\r\n  getOSStyle(): OSStyle {\r\n    return this.osStyle;\r\n  }\r\n\r\n  /**\r\n   * Set OS style (macOS or Windows)\r\n   */\r\n  setOSStyle(style: OSStyle): void {\r\n    if (this.osStyle === style) return;\r\n\r\n    this.osStyle = style;\r\n    \r\n    // Save to localStorage\r\n    try {\r\n      localStorage.setItem('vfs-os-style', style);\r\n    } catch (error) {\r\n      console.warn('Failed to save OS style preference:', error);\r\n    }\r\n\r\n    // Update desktop UI\r\n    this.updateDesktopForOSStyle(style);\r\n\r\n    // Emit change event\r\n    eventBus.emit('desktop:os-style-changed', style);\r\n    \r\n    console.log(`OS style changed to: ${style}`);\r\n  }\r\n\r\n  /**\r\n   * Update desktop UI for OS style\r\n   */\r\n  private updateDesktopForOSStyle(style: OSStyle): void {\r\n    const desktop = document.querySelector('.desktop-container');\r\n    if (desktop) {\r\n      desktop.classList.remove('os-macos', 'os-windows');\r\n      desktop.classList.add(`os-${style}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current theme\r\n   */\r\n  getTheme(): Theme {\r\n    return this.theme;\r\n  }\r\n\r\n  /**\r\n   * Set theme (light or dark)\r\n   */\r\n  setTheme(theme: Theme): void {\r\n    if (this.theme === theme) return;\r\n\r\n    this.theme = theme;\r\n    \r\n    // Save to localStorage\r\n    try {\r\n      localStorage.setItem('vfs-theme', theme);\r\n    } catch (error) {\r\n      console.warn('Failed to save theme preference:', error);\r\n    }\r\n\r\n    // Apply theme to document\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n\r\n    // Emit change event\r\n    eventBus.emit('desktop:theme-changed', theme);\r\n    \r\n    console.log(`Theme changed to: ${theme}`);\r\n  }\r\n\r\n  /**\r\n   * Toggle between light and dark theme\r\n   */\r\n  toggleTheme(): void {\r\n    const newTheme = this.theme === 'light' ? 'dark' : 'light';\r\n    this.setTheme(newTheme);\r\n  }\r\n\r\n  /**\r\n   * Register a new desktop application\r\n   */\r\n  registerApp(app: DesktopApp): void {\r\n    const existingIndex = this.apps.findIndex(a => a.id === app.id);\r\n    if (existingIndex >= 0) {\r\n      this.apps[existingIndex] = app;\r\n    } else {\r\n      this.apps.push(app);\r\n    }\r\n    \r\n    console.log(`Registered application: ${app.name}`);\r\n  }\r\n\r\n  /**\r\n   * Unregister a desktop application\r\n   */\r\n  unregisterApp(appId: string): void {\r\n    const index = this.apps.findIndex(a => a.id === appId);\r\n    if (index >= 0) {\r\n      const app = this.apps[index];\r\n      this.apps.splice(index, 1);\r\n      if (app) {\r\n        console.log(`Unregistered application: ${app.name}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get applications by category\r\n   */\r\n  getAppsByCategory(category: string): DesktopApp[] {\r\n    return this.apps.filter(app => app.category === category);\r\n  }\r\n\r\n  /**\r\n   * Get all application categories\r\n   */\r\n  getCategories(): string[] {\r\n    const categories = new Set(this.apps.map(app => app.category).filter((cat): cat is string => Boolean(cat)));\r\n    return Array.from(categories).sort();\r\n  }\r\n\r\n  /**\r\n   * Search applications by name\r\n   */\r\n  searchApps(query: string): DesktopApp[] {\r\n    const lowerQuery = query.toLowerCase();\r\n    return this.apps.filter(app => \r\n      app.name.toLowerCase().includes(lowerQuery) ||\r\n      app.id.toLowerCase().includes(lowerQuery) ||\r\n      (app.category && app.category.toLowerCase().includes(lowerQuery))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get application by ID\r\n   */\r\n  getApp(appId: string): DesktopApp | undefined {\r\n    return this.apps.find(app => app.id === appId);\r\n  }\r\n\r\n  /**\r\n   * Get applications for dock/taskbar (apps that should be visible in the dock)\r\n   */\r\n  getDockedApps(): DesktopApp[] {\r\n    // Return main applications that should always be in dock\r\n    return this.apps.filter(app => \r\n      ['file-explorer', 'terminal', 'text-editor', 'calculator', 'chat', 'settings', 'test-web-component', 'todo-app'].includes(app.id)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the desktop service\r\n   */\r\n  async destroy(): Promise<void> {\r\n    this.apps = [];\r\n    console.log('Desktop Service destroyed');\r\n  }\r\n}","/**\r\n * Authentication Service\r\n * Handles user authentication, token management, and session persistence\r\n */\r\n\r\nimport type { IAuthService, User, AuthState, AuthError } from '../core/types/index.js';\r\nimport { eventBus } from '../core/events/event-bus.js';\r\n\r\nexport class AuthService implements IAuthService {\r\n  readonly name = 'AuthService';\r\n  \r\n  private authState: AuthState = {\r\n    isAuthenticated: false,\r\n    user: null,\r\n    token: null\r\n  };\r\n\r\n  // Match Angular client: use /api for server requests\r\n  // In development, the Vite proxy will handle routing to the correct server\r\n  private apiBaseUrl = '/api';\r\n\r\n  /**\r\n   * Initialize the authentication service\r\n   */\r\n  async initialize(): Promise<void> {\r\n    console.log('Initializing Auth Service...');\r\n    \r\n    // Try to restore session from localStorage\r\n    await this.restoreSession();\r\n    \r\n    console.log('Auth Service initialized');\r\n  }\r\n\r\n  /**\r\n   * Restore session from localStorage\r\n   */\r\n  private async restoreSession(): Promise<void> {\r\n    try {\r\n      const token = localStorage.getItem('vfs-auth-token');\r\n      const userStr = localStorage.getItem('vfs-auth-user');\r\n      \r\n      if (token && userStr) {\r\n        const user = JSON.parse(userStr) as User;\r\n        \r\n        // Validate token with server\r\n        const isValid = await this.validateToken(token);\r\n        if (isValid) {\r\n          this.authState = {\r\n            isAuthenticated: true,\r\n            user,\r\n            token\r\n          };\r\n          \r\n          console.log('Session restored for user:', user.username);\r\n          eventBus.emit('auth:login', user);\r\n        } else {\r\n          // Token is invalid, clear stored data\r\n          this.clearStoredAuth();\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to restore session:', error);\r\n      this.clearStoredAuth();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate token with server\r\n   */\r\n  private async validateToken(token: string): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(`${this.apiBaseUrl}/auth/user`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        cache: 'no-cache'\r\n      });\r\n      \r\n      return response.ok;\r\n    } catch (error) {\r\n      console.warn('Token validation failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Login user\r\n   */\r\n  async login(username: string, password: string): Promise<User> {\r\n    try {\r\n      const response = await fetch(`${this.apiBaseUrl}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ username, password })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json().catch(() => ({}));\r\n        throw new Error(error.message || 'Login failed');\r\n      }\r\n\r\n      const user: User = await response.json();\r\n\r\n      // Update auth state\r\n      this.authState = {\r\n        isAuthenticated: true,\r\n        user,\r\n        token: user.token || null\r\n      };\r\n\r\n      // Store in localStorage\r\n      this.storeAuth(user, user.token || '');\r\n\r\n      // Emit login event\r\n      eventBus.emit('auth:login', user);\r\n\r\n      console.log('User logged in:', user.username);\r\n      return user;\r\n\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register new user\r\n   */\r\n  async register(username: string, password: string, email?: string): Promise<User> {\r\n    try {\r\n      const response = await fetch(`${this.apiBaseUrl}/auth/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ username, password, email })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json().catch(() => ({}));\r\n        throw new Error(error.message || 'Registration failed');\r\n      }\r\n\r\n      const user: User = await response.json();\r\n      \r\n      // Auto-login after successful registration (server returns complete user with token)\r\n      if (user.token) {\r\n        // Update auth state\r\n        this.authState = {\r\n          isAuthenticated: true,\r\n          user,\r\n          token: user.token\r\n        };\r\n\r\n        // Store in localStorage\r\n        this.storeAuth(user, user.token);\r\n\r\n        // Emit login event\r\n        eventBus.emit('auth:login', user);\r\n\r\n        console.log('User registered and logged in:', user.username);\r\n        return user;\r\n      } else {\r\n        // Registration successful but need to login separately\r\n        console.log('User registered successfully:', user.username);\r\n        return user;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Registration failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logout user\r\n   */\r\n  async logout(): Promise<void> {\r\n    try {\r\n      // JWT tokens are stateless, so we only need to clear client-side state\r\n      // No server-side logout endpoint needed\r\n\r\n      // Clear auth state\r\n      this.authState = {\r\n        isAuthenticated: false,\r\n        user: null,\r\n        token: null\r\n      };\r\n\r\n      // Clear stored auth data\r\n      this.clearStoredAuth();\r\n\r\n      // Emit logout event\r\n      eventBus.emit('auth:logout');\r\n\r\n      console.log('User logged out');\r\n\r\n    } catch (error) {\r\n      console.error('Logout failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current user\r\n   */\r\n  getCurrentUser(): User | null {\r\n    return this.authState.user;\r\n  }\r\n\r\n  /**\r\n   * Check if user is authenticated\r\n   */\r\n  isAuthenticated(): boolean {\r\n    return this.authState.isAuthenticated;\r\n  }\r\n\r\n  /**\r\n   * Get authentication token\r\n   */\r\n  getToken(): string | null {\r\n    return this.authState.token;\r\n  }\r\n\r\n  /**\r\n   * Get current auth state\r\n   */\r\n  getAuthState(): AuthState {\r\n    return { ...this.authState };\r\n  }\r\n\r\n  /**\r\n   * Check if user has specific role\r\n   */\r\n  hasRole(role: string): boolean {\r\n    return this.authState.user?.roles?.includes(role) ?? false;\r\n  }\r\n\r\n  /**\r\n   * Check if user has any of the specified roles\r\n   */\r\n  hasAnyRole(roles: string[]): boolean {\r\n    return roles.some(role => this.hasRole(role));\r\n  }\r\n\r\n  /**\r\n   * Check if user is admin\r\n   */\r\n  isAdmin(): boolean {\r\n    return this.hasAnyRole(['Admin', 'SuperAdmin']);\r\n  }\r\n\r\n  /**\r\n   * Store authentication data in localStorage\r\n   */\r\n  private storeAuth(user: User, token: string): void {\r\n    try {\r\n      localStorage.setItem('vfs-auth-token', token);\r\n      localStorage.setItem('vfs-auth-user', JSON.stringify({\r\n        id: user.id,\r\n        username: user.username,\r\n        email: user.email,\r\n        roles: user.roles\r\n      }));\r\n    } catch (error) {\r\n      console.warn('Failed to store auth data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear stored authentication data\r\n   */\r\n  private clearStoredAuth(): void {\r\n    try {\r\n      localStorage.removeItem('vfs-auth-token');\r\n      localStorage.removeItem('vfs-auth-user');\r\n    } catch (error) {\r\n      console.warn('Failed to clear stored auth data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refresh authentication token\r\n   */\r\n  async refreshToken(): Promise<string | null> {\r\n    try {\r\n      if (!this.authState.token) {\r\n        throw new Error('No token to refresh');\r\n      }\r\n\r\n      const response = await fetch(`${this.apiBaseUrl}/auth/refresh`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.authState.token}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Token refresh failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      const newToken = data.token;\r\n\r\n      // Update stored token\r\n      this.authState.token = newToken;\r\n      if (this.authState.user) {\r\n        this.authState.user.token = newToken;\r\n        this.storeAuth(this.authState.user, newToken);\r\n      }\r\n\r\n      console.log('Token refreshed successfully');\r\n      return newToken;\r\n\r\n    } catch (error) {\r\n      console.error('Token refresh failed:', error);\r\n      \r\n      // If refresh fails, logout user\r\n      await this.logout();\r\n      eventBus.emit('auth:token-expired');\r\n      \r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user display name\r\n   */\r\n  getUserDisplayName(): string {\r\n    const user = this.authState.user;\r\n    if (!user) return 'Guest';\r\n    \r\n    return user.username || user.email || 'User';\r\n  }\r\n\r\n  /**\r\n   * Update user profile\r\n   * TODO: Implement when server endpoint is available\r\n   */\r\n  async updateProfile(updates: Partial<Pick<User, 'username' | 'email'>>): Promise<User> {\r\n    // Server endpoint /auth/profile not implemented yet\r\n    throw new Error('Profile update not yet implemented on server');\r\n\r\n    /* TODO: Uncomment when server endpoint is ready\r\n    try {\r\n      if (!this.authState.token || !this.authState.user) {\r\n        throw new Error('Not authenticated');\r\n      }\r\n\r\n      const response = await fetch(`${this.apiBaseUrl}/auth/profile`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.authState.token}`\r\n        },\r\n        body: JSON.stringify(updates)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json().catch(() => ({}));\r\n        throw new Error(error.message || 'Profile update failed');\r\n      }\r\n\r\n      const updatedUser = await response.json();\r\n      \r\n      // Update local user data\r\n      this.authState.user = { ...this.authState.user, ...updatedUser };\r\n      if (this.authState.user && this.authState.token) {\r\n        this.storeAuth(this.authState.user, this.authState.token);\r\n      }\r\n\r\n      console.log('Profile updated successfully');\r\n      if (!this.authState.user) {\r\n        throw new Error('User state is null after update');\r\n      }\r\n      return this.authState.user;\r\n\r\n    } catch (error) {\r\n      console.error('Profile update failed:', error);\r\n      throw error;\r\n    }\r\n    */\r\n  }\r\n\r\n  /**\r\n   * Change password\r\n   * TODO: Implement when server endpoint is available\r\n   */\r\n  async changePassword(currentPassword: string, newPassword: string): Promise<void> {\r\n    // Server endpoint /auth/change-password not implemented yet\r\n    throw new Error('Password change not yet implemented on server');\r\n\r\n    /* TODO: Uncomment when server endpoint is ready\r\n    try {\r\n      if (!this.authState.token) {\r\n        throw new Error('Not authenticated');\r\n      }\r\n\r\n      const response = await fetch(`${this.apiBaseUrl}/auth/change-password`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.authState.token}`\r\n        },\r\n        body: JSON.stringify({ currentPassword, newPassword })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json().catch(() => ({}));\r\n        throw new Error(error.message || 'Password change failed');\r\n      }\r\n\r\n      console.log('Password changed successfully');\r\n\r\n    } catch (error) {\r\n      console.error('Password change failed:', error);\r\n      throw error;\r\n    }\r\n    */\r\n  }\r\n\r\n  /**\r\n   * Destroy the authentication service\r\n   */\r\n  async destroy(): Promise<void> {\r\n    // Logout if authenticated\r\n    if (this.authState.isAuthenticated) {\r\n      await this.logout();\r\n    }\r\n    \r\n    console.log('Auth Service destroyed');\r\n  }\r\n}","/**\r\n * Theme Service\r\n * Manages application theming and visual appearance\r\n */\r\n\r\nimport type { IService, Theme } from '../core/types/index.js';\r\nimport { eventBus } from '../core/events/event-bus.js';\r\n\r\nexport class ThemeService implements IService {\r\n  readonly name = 'ThemeService';\r\n  \r\n  private currentTheme: Theme = 'light';\r\n  private systemPreference: Theme = 'light';\r\n\r\n  /**\r\n   * Initialize the theme service\r\n   */\r\n  async initialize(): Promise<void> {\r\n    console.log('Initializing Theme Service...');\r\n    \r\n    // Detect system theme preference\r\n    this.detectSystemTheme();\r\n    \r\n    // Load saved theme or use system preference\r\n    this.loadTheme();\r\n    \r\n    // Listen for system theme changes\r\n    this.setupSystemThemeListener();\r\n    \r\n    console.log('Theme Service initialized');\r\n  }\r\n\r\n  /**\r\n   * Detect system theme preference\r\n   */\r\n  private detectSystemTheme(): void {\r\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      this.systemPreference = 'dark';\r\n    } else {\r\n      this.systemPreference = 'light';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load theme from localStorage or use system preference\r\n   */\r\n  private loadTheme(): void {\r\n    try {\r\n      const savedTheme = localStorage.getItem('vfs-theme') as Theme;\r\n      if (savedTheme === 'light' || savedTheme === 'dark') {\r\n        this.setTheme(savedTheme);\r\n      } else {\r\n        this.setTheme(this.systemPreference);\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to load theme preference:', error);\r\n      this.setTheme(this.systemPreference);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup listener for system theme changes\r\n   */\r\n  private setupSystemThemeListener(): void {\r\n    if (window.matchMedia) {\r\n      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n      mediaQuery.addListener((e) => {\r\n        this.systemPreference = e.matches ? 'dark' : 'light';\r\n        \r\n        // If user hasn't set a custom theme, follow system\r\n        const savedTheme = localStorage.getItem('vfs-theme');\r\n        if (!savedTheme) {\r\n          this.setTheme(this.systemPreference);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current theme\r\n   */\r\n  getTheme(): Theme {\r\n    return this.currentTheme;\r\n  }\r\n\r\n  /**\r\n   * Set theme\r\n   */\r\n  setTheme(theme: Theme): void {\r\n    if (this.currentTheme === theme) return;\r\n\r\n    this.currentTheme = theme;\r\n    \r\n    // Apply theme to document\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    \r\n    // Save to localStorage\r\n    try {\r\n      localStorage.setItem('vfs-theme', theme);\r\n    } catch (error) {\r\n      console.warn('Failed to save theme preference:', error);\r\n    }\r\n    \r\n    // Emit theme change event\r\n    eventBus.emit('desktop:theme-changed', theme);\r\n    \r\n    console.log(`Theme set to: ${theme}`);\r\n  }\r\n\r\n  /**\r\n   * Toggle between light and dark theme\r\n   */\r\n  toggleTheme(): void {\r\n    const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';\r\n    this.setTheme(newTheme);\r\n  }\r\n\r\n  /**\r\n   * Get system theme preference\r\n   */\r\n  getSystemPreference(): Theme {\r\n    return this.systemPreference;\r\n  }\r\n\r\n  /**\r\n   * Use system theme preference\r\n   */\r\n  useSystemTheme(): void {\r\n    this.setTheme(this.systemPreference);\r\n  }\r\n\r\n  /**\r\n   * Check if currently using system theme\r\n   */\r\n  isUsingSystemTheme(): boolean {\r\n    return this.currentTheme === this.systemPreference;\r\n  }\r\n\r\n  /**\r\n   * Get available themes\r\n   */\r\n  getAvailableThemes(): Theme[] {\r\n    return ['light', 'dark'];\r\n  }\r\n\r\n  /**\r\n   * Apply theme to specific element\r\n   */\r\n  applyThemeToElement(element: HTMLElement, theme?: Theme): void {\r\n    const targetTheme = theme || this.currentTheme;\r\n    element.setAttribute('data-theme', targetTheme);\r\n  }\r\n\r\n  /**\r\n   * Remove theme from specific element (inherit from parent)\r\n   */\r\n  removeThemeFromElement(element: HTMLElement): void {\r\n    element.removeAttribute('data-theme');\r\n  }\r\n\r\n  /**\r\n   * Get CSS custom property value for current theme\r\n   */\r\n  getCSSProperty(property: string): string {\r\n    return getComputedStyle(document.documentElement).getPropertyValue(property);\r\n  }\r\n\r\n  /**\r\n   * Set CSS custom property\r\n   */\r\n  setCSSProperty(property: string, value: string): void {\r\n    document.documentElement.style.setProperty(property, value);\r\n  }\r\n\r\n  /**\r\n   * Create a themed color palette\r\n   */\r\n  getColorPalette(): Record<string, string> {\r\n    return {\r\n      background: this.getCSSProperty('--bg'),\r\n      backgroundSecondary: this.getCSSProperty('--bg-secondary'),\r\n      text: this.getCSSProperty('--text'),\r\n      textSecondary: this.getCSSProperty('--text-secondary'),\r\n      accent: this.getCSSProperty('--accent'),\r\n      border: this.getCSSProperty('--border'),\r\n      success: this.getCSSProperty('--success'),\r\n      warning: this.getCSSProperty('--warning'),\r\n      danger: this.getCSSProperty('--danger')\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if dark theme is active\r\n   */\r\n  isDarkTheme(): boolean {\r\n    return this.currentTheme === 'dark';\r\n  }\r\n\r\n  /**\r\n   * Check if light theme is active\r\n   */\r\n  isLightTheme(): boolean {\r\n    return this.currentTheme === 'light';\r\n  }\r\n\r\n  /**\r\n   * Destroy the theme service\r\n   */\r\n  async destroy(): Promise<void> {\r\n    // Reset to light theme\r\n    document.documentElement.removeAttribute('data-theme');\r\n    console.log('Theme Service destroyed');\r\n  }\r\n}","/**\r\n * Component Loader Service\r\n * Manages dynamic loading and instantiation of window components\r\n */\r\n\r\nimport type { BaseComponent } from '../../components/base/base-component.js';\r\nimport type { IComponent, IService } from '../types/index.js';\r\n\r\nexport interface ComponentConstructor {\r\n  new(container: HTMLElement, inputs?: Record<string, unknown>, ...args: any[]): IComponent;\r\n}\r\n\r\nexport interface WebComponentConstructor {\r\n  new(): HTMLElement;\r\n}\r\n\r\nexport type AnyComponentConstructor = ComponentConstructor | WebComponentConstructor;\r\n\r\nexport interface ComponentRegistry {\r\n  [key: string]: () => Promise<AnyComponentConstructor>;\r\n}\r\n\r\nexport class ComponentLoaderService implements IService {\r\n  readonly name = 'ComponentLoaderService';\r\n\r\n  private registry: ComponentRegistry = {};\r\n\r\n  /**\r\n   * Initialize the component loader\r\n   */\r\n  async initialize(): Promise<void> {\r\n    console.log('Initializing Component Loader Service...');\r\n    \r\n    // Register default components\r\n    this.registerDefaultComponents();\r\n    \r\n    console.log('Component Loader Service initialized');\r\n  }\r\n\r\n  /**\r\n   * Register default components\r\n   */\r\n  private registerDefaultComponents(): void {\r\n    // Auth components\r\n    this.registerComponent('login', () => \r\n      import('../../components/windows/login.component.js')\r\n        .then(m => m.LoginComponent)\r\n    );\r\n\r\n    this.registerComponent('register', () => \r\n      import('../../components/windows/register.component.js')\r\n        .then(m => m.RegisterComponent)\r\n    );\r\n\r\n    // File Explorer component (KISS implementation)\r\n    this.registerComponent('file-explorer', () =>\r\n      import('../../components/windows/file-explorer.component.js')\r\n        .then(m => m.FileExplorerComponent)\r\n    );\r\n\r\n    // Test Web Component\r\n    this.registerComponent('test-web-component', () =>\r\n      import('../../components/windows/test-web-component.js')\r\n        .then(m => m.TestWebComponent)\r\n    );\r\n\r\n    // Todo App Web Components\r\n    this.registerComponent('todo-app', () =>\r\n      import('../../components/windows/todo-app.component.js')\r\n        .then(m => m.TodoAppComponent)\r\n    );\r\n\r\n    this.registerComponent('add-todo', () =>\r\n      import('../../components/windows/add-todo.component.js')\r\n        .then(m => m.AddTodoComponent)\r\n    );\r\n\r\n    this.registerComponent('todo-item', () =>\r\n      import('../../components/windows/todo-item.component.js')\r\n        .then(m => m.TodoItemComponent)\r\n    );\r\n\r\n    // TODO: Register other components as they are created\r\n  }\r\n\r\n  /**\r\n   * Register a component\r\n   */\r\n  registerComponent(name: string, loader: () => Promise<AnyComponentConstructor>): void {\r\n    this.registry[name] = loader;\r\n    console.log(`Component '${name}' registered`);\r\n  }\r\n\r\n  /**\r\n   * Load and instantiate a component\r\n   */\r\n  async loadComponent(\r\n    name: string, \r\n    container: HTMLElement, \r\n    inputs?: Record<string, unknown>\r\n  ): Promise<IComponent | null> {\r\n    const loader = this.registry[name];\r\n    if (!loader) {\r\n      console.warn(`Component '${name}' not found in registry`);\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      console.log(`Loading component '${name}'...`);\r\n      const ComponentClass = await loader();\r\n\r\n      // Check if it's a Web Component (extends HTMLElement)\r\n      if (this.isWebComponent(ComponentClass)) {\r\n        return this.createWebComponentAdapter(ComponentClass, container, inputs);\r\n      } else {\r\n        // Legacy BaseComponent\r\n        const instance = new (ComponentClass as ComponentConstructor)(container, inputs);\r\n        console.log(`Component '${name}' loaded successfully`);\r\n        return instance;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Failed to load component '${name}':`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a component class is a Web Component\r\n   */\r\n  private isWebComponent(ComponentClass: AnyComponentConstructor): ComponentClass is WebComponentConstructor {\r\n    return ComponentClass.prototype instanceof HTMLElement;\r\n  }\r\n\r\n  /**\r\n   * Create an adapter for Web Components to work with the component system\r\n   */\r\n  private createWebComponentAdapter(\r\n    WebComponentClass: WebComponentConstructor,\r\n    container: HTMLElement,\r\n    inputs?: Record<string, unknown>\r\n  ): IComponent {\r\n    let mountedWebComponent: HTMLElement | null = null;\r\n\r\n    return {\r\n      container,\r\n      inputs,\r\n\r\n      mount: (): void => {\r\n        // Create and append the Web Component\r\n        const webComponent = new WebComponentClass();\r\n        mountedWebComponent = webComponent;\r\n\r\n        // Set inputs as attributes or properties if needed\r\n        if (inputs) {\r\n          Object.entries(inputs).forEach(([key, value]) => {\r\n            if (typeof value === 'string') {\r\n              webComponent.setAttribute(key, value);\r\n            } else if (typeof value === 'boolean') {\r\n              if (value) {\r\n                webComponent.setAttribute(key, '');\r\n              } else {\r\n                webComponent.removeAttribute(key);\r\n              }\r\n            } else {\r\n              (webComponent as any)[key] = value;\r\n            }\r\n          });\r\n        }\r\n\r\n        container.appendChild(webComponent);\r\n      },\r\n\r\n      unmount: (): void => {\r\n        // Remove the mounted Web Component\r\n        if (mountedWebComponent && container.contains(mountedWebComponent)) {\r\n          container.removeChild(mountedWebComponent);\r\n          mountedWebComponent = null;\r\n        }\r\n      },\r\n\r\n      update: (newInputs: Record<string, unknown>): void => {\r\n        // Update inputs on the mounted Web Component\r\n        if (mountedWebComponent && mountedWebComponent instanceof WebComponentClass) {\r\n          Object.entries(newInputs).forEach(([key, value]) => {\r\n            if (typeof value === 'string') {\r\n              mountedWebComponent!.setAttribute(key, value);\r\n            } else if (typeof value === 'boolean') {\r\n              if (value) {\r\n                mountedWebComponent!.setAttribute(key, '');\r\n              } else {\r\n                mountedWebComponent!.removeAttribute(key);\r\n              }\r\n            } else {\r\n              (mountedWebComponent as any)[key] = value;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if component is registered\r\n   */\r\n  hasComponent(name: string): boolean {\r\n    return name in this.registry;\r\n  }\r\n\r\n  /**\r\n   * Get list of registered component names\r\n   */\r\n  getRegisteredComponents(): string[] {\r\n    return Object.keys(this.registry);\r\n  }\r\n\r\n  /**\r\n   * Dispose of the service\r\n   */\r\n  async dispose(): Promise<void> {\r\n    this.registry = {};\r\n    console.log('Component Loader Service disposed');\r\n  }\r\n}","/**\r\n * User Configuration Service\r\n * Handles saving and retrieving user preferences and settings\r\n * Based on Angular client's UserConfigService\r\n */\r\n\r\nimport type { IService } from '../types/index.js';\r\nimport { serviceContainer, SERVICE_TOKENS } from '../di/service-container.js';\r\nimport { eventBus } from '../events/event-bus.js';\r\nimport type { IAuthService } from '../types/index.js';\r\n\r\nexport interface UserConfig {\r\n  userId: string;\r\n  settings: Record<string, any>;\r\n}\r\n\r\nexport interface WindowPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface WindowSize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface SavedWindow {\r\n  id: string;\r\n  title?: string;\r\n  icon?: string;\r\n  position: WindowPosition;\r\n  size: WindowSize;\r\n  minSize?: WindowSize;\r\n  zIndex?: number;\r\n  isMinimized?: boolean;\r\n  isFullscreen?: boolean;\r\n  componentInputs?: Record<string, any>;\r\n  isTack?: boolean;\r\n}\r\n\r\nexport class UserConfigService implements IService {\r\n  readonly name = 'UserConfigService';\r\n\r\n  private authService!: IAuthService;\r\n  private config: UserConfig | null = null;\r\n  private apiBaseUrl = '/api';\r\n  private readonly apiUrl = '/user/config';\r\n  \r\n  // Save status tracking\r\n  private lastSaveAttempt: Date | null = null;\r\n  private lastSaveSuccess: Date | null = null;\r\n  private lastSaveError: string | null = null;\r\n  private isDebugMode = true;\r\n\r\n  // Debouncing for saves to prevent rate limiting\r\n  private saveTimeout: number | null = null;\r\n  private readonly saveDebounceMs = 2000; // Wait 2 seconds after last save request\r\n\r\n  /**\r\n   * Initialize the user config service\r\n   */\r\n  async initialize(): Promise<void> {\r\n    console.log('Initializing User Config Service...');\r\n    \r\n    // Get auth service\r\n    this.authService = serviceContainer.get(SERVICE_TOKENS.AUTH_SERVICE);\r\n    \r\n    // Listen for auth events\r\n    eventBus.on('auth:login', () => this.fetchConfig());\r\n    eventBus.on('auth:logout', () => this.clearConfig());\r\n    \r\n    // If already authenticated, fetch config\r\n    if (this.authService.isAuthenticated()) {\r\n      this.fetchConfig();\r\n    }\r\n    \r\n    console.log('User Config Service initialized');\r\n  }\r\n\r\n  /**\r\n   * Get current config\r\n   */\r\n  getConfig(): UserConfig | null {\r\n    return this.config;\r\n  }\r\n\r\n  /**\r\n   * Get save status information\r\n   */\r\n  getSaveStatus() {\r\n    return {\r\n      lastAttempt: this.lastSaveAttempt,\r\n      lastSuccess: this.lastSaveSuccess,\r\n      lastError: this.lastSaveError,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fetch user configuration from server\r\n   */\r\n  async fetchConfig(): Promise<void> {\r\n    if (!this.authService.isAuthenticated()) {\r\n      console.log('Not fetching config: user not authenticated');\r\n      return;\r\n    }\r\n\r\n    if (this.isDebugMode) {\r\n      console.log('UserConfigService: Fetching user config');\r\n    }\r\n\r\n    try {\r\n      const headers = this.getAuthHeaders();\r\n        if (!headers) {\r\n            if (this.isDebugMode) {\r\n                console.log('UserConfigService: No auth token available, skipping config fetch');\r\n            }\r\n            return;\r\n        }\r\n\r\n      const response = await fetch(`${this.apiBaseUrl}${this.apiUrl}`, {\r\n        method: 'GET',\r\n        headers\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const config: UserConfig = await response.json();\r\n      this.config = config;\r\n\r\n      if (this.isDebugMode) {\r\n        console.log('UserConfigService: Config fetched successfully', config);\r\n        const windowCount = config?.settings?.['windows']?.length || 0;\r\n        console.log(`UserConfigService: Config contains ${windowCount} windows`);\r\n      }\r\n\r\n      // Emit config loaded event\r\n      eventBus.emit('userconfig:loaded', config);\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching user config:', error);\r\n      eventBus.emit('userconfig:error', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save user configuration to server\r\n   */\r\n  async saveConfig(settingsData: Record<string, any>): Promise<void> {\r\n    if (!this.authService.isAuthenticated()) {\r\n      console.log('Not saving config: user not authenticated');\r\n      return;\r\n    }\r\n\r\n    // Update save attempt timestamp\r\n    this.lastSaveAttempt = new Date();\r\n\r\n    if (this.isDebugMode) {\r\n      console.log('UserConfigService: Saving user config', settingsData);\r\n\r\n      // Check specifically for windows data\r\n      const windowsInSettings = settingsData?.['settings']?.['windows']?.length || 0;\r\n      const windowsAtRoot = settingsData?.['windows']?.length || 0;\r\n\r\n      if (windowsInSettings > 0) {\r\n        console.log(`UserConfigService: Found ${windowsInSettings} windows in settings.windows structure`);\r\n      }\r\n      if (windowsAtRoot > 0) {\r\n        console.log(`UserConfigService: Found ${windowsAtRoot} windows at root level`);\r\n      }\r\n    }\r\n\r\n    // Prepare settings structure\r\n    let updatedSettings: Record<string, any> = {};\r\n\r\n    // If settingsData has nested 'settings', use that directly\r\n    if (settingsData['settings']) {\r\n      updatedSettings = settingsData['settings'];\r\n    }\r\n    // Otherwise, use the entire object as settings\r\n    else {\r\n      updatedSettings = settingsData;\r\n    }\r\n\r\n    // Build config object for server\r\n    const config = {\r\n      Settings: updatedSettings,\r\n    };\r\n\r\n    try {\r\n      // Get fresh headers (the auth service will handle token refresh internally if needed)\r\n      const headers = this.getAuthHeaders();\r\n        if (!headers) {\r\n            if (this.isDebugMode) {\r\n                console.log('UserConfigService: No auth token available, skipping config save');\r\n            }\r\n            return;\r\n        }\r\n\r\n      if (this.isDebugMode) {\r\n        console.log('UserConfigService: Using auth token for config save');\r\n        console.log('UserConfigService: Saving config to server', {\r\n          hasSettings: !!config.Settings,\r\n          settingsKeys: Object.keys(config.Settings || {}),\r\n        });\r\n      }\r\n\r\n      const response = await fetch(`${this.apiBaseUrl}${this.apiUrl}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...headers\r\n        },\r\n        body: JSON.stringify(config)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const savedConfig: UserConfig = await response.json();\r\n      this.config = savedConfig;\r\n      this.lastSaveSuccess = new Date();\r\n      this.lastSaveError = null;\r\n\r\n      if (this.isDebugMode) {\r\n        console.log('UserConfigService: Config saved successfully');\r\n      }\r\n\r\n      // Emit config saved event\r\n      eventBus.emit('userconfig:saved', savedConfig);\r\n\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n      this.lastSaveError = errorMessage;\r\n      console.error('Error saving user config:', error);\r\n      eventBus.emit('userconfig:error', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save window configuration (debounced to prevent rate limiting)\r\n   */\r\n  async saveWindowConfig(windows: SavedWindow[]): Promise<void> {\r\n    if (this.isDebugMode) {\r\n      console.log('UserConfigService: Scheduling debounced window configuration save', { windowCount: windows.length });\r\n    }\r\n\r\n    // Clear existing timeout\r\n    if (this.saveTimeout !== null) {\r\n      clearTimeout(this.saveTimeout);\r\n    }\r\n\r\n    // Set new timeout for debounced save\r\n    this.saveTimeout = window.setTimeout(async () => {\r\n      try {\r\n        if (this.isDebugMode) {\r\n          console.log('UserConfigService: Executing debounced window configuration save');\r\n        }\r\n\r\n        // Update current config with new windows\r\n        const currentSettings = this.config?.settings || {};\r\n        const updatedSettings = {\r\n          ...currentSettings,\r\n          windows: windows\r\n        };\r\n\r\n        await this.saveConfig({ settings: updatedSettings });\r\n      } catch (error) {\r\n        console.warn('Debounced window config save failed:', error);\r\n      } finally {\r\n        this.saveTimeout = null;\r\n      }\r\n    }, this.saveDebounceMs);\r\n  }\r\n\r\n  /**\r\n   * Get saved windows from config\r\n   */\r\n  getSavedWindows(): SavedWindow[] {\r\n    const windows = this.config?.settings?.['windows'];\r\n    if (Array.isArray(windows)) {\r\n      return windows as SavedWindow[];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Update specific setting\r\n   */\r\n  async updateSetting(key: string, value: any): Promise<void> {\r\n    const currentSettings = this.config?.settings || {};\r\n    const updatedSettings = {\r\n      ...currentSettings,\r\n      [key]: value\r\n    };\r\n\r\n    await this.saveConfig({ settings: updatedSettings });\r\n  }\r\n\r\n  /**\r\n   * Get specific setting\r\n   */\r\n  getSetting<T = any>(key: string, defaultValue?: T): T {\r\n    return this.config?.settings?.[key] ?? defaultValue;\r\n  }\r\n\r\n  /**\r\n   * Clear configuration (on logout)\r\n   */\r\n  private clearConfig(): void {\r\n    this.config = null;\r\n    this.lastSaveAttempt = null;\r\n    this.lastSaveSuccess = null;\r\n    this.lastSaveError = null;\r\n    \r\n    if (this.isDebugMode) {\r\n      console.log('UserConfigService: Config cleared');\r\n    }\r\n\r\n    eventBus.emit('userconfig:cleared');\r\n  }\r\n\r\n  /**\r\n   * Get authentication headers\r\n   */\r\n    private getAuthHeaders(): Record<string, string> | null {\r\n    const user = this.authService.getCurrentUser();\r\n    if (!user || !user.token) {\r\n        return null;\r\n    }\r\n\r\n    return {\r\n      'Authorization': `Bearer ${user.token}`,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Dispose of the service\r\n   */\r\n  async dispose(): Promise<void> {\r\n    // Clear any pending debounced save\r\n    if (this.saveTimeout !== null) {\r\n      clearTimeout(this.saveTimeout);\r\n      this.saveTimeout = null;\r\n    }\r\n\r\n    // Clean up event listeners\r\n    eventBus.off('auth:login', this.fetchConfig);\r\n    eventBus.off('auth:logout', this.clearConfig);\r\n    \r\n    console.log('User Config Service disposed');\r\n  }\r\n}","/**\r\n * Base component class that all window components should extend\r\n * Provides common functionality and lifecycle management\r\n */\r\n\r\nimport type { IComponent } from '../../core/types/index.js';\r\n\r\nexport abstract class BaseComponent implements IComponent {\r\n  protected _mounted = false;\r\n  protected _destroyed = false;\r\n\r\n  constructor(\r\n    public readonly container: HTMLElement,\r\n    public inputs?: Record<string, unknown>\r\n  ) {\r\n    this.bindMethods();\r\n  }\r\n\r\n  /**\r\n   * Bind all methods to this instance to avoid context issues\r\n   */\r\n  private bindMethods(): void {\r\n    const methodNames = Object.getOwnPropertyNames(Object.getPrototypeOf(this));\r\n    for (const methodName of methodNames) {\r\n      const method = (this as any)[methodName];\r\n      if (typeof method === 'function' && methodName !== 'constructor') {\r\n        (this as any)[methodName] = method.bind(this);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mount the component - must be implemented by subclasses\r\n   */\r\n  abstract mount(): void | Promise<void>;\r\n\r\n  /**\r\n   * Unmount the component - should be overridden if cleanup is needed\r\n   */\r\n  unmount(): void | Promise<void> {\r\n    this._mounted = false;\r\n    this._destroyed = true;\r\n    this.container.innerHTML = '';\r\n  }\r\n\r\n  /**\r\n   * Update component inputs - can be overridden for reactive updates\r\n   */\r\n  update(inputs: Record<string, unknown>): void | Promise<void> {\r\n    this.inputs = { ...this.inputs, ...inputs };\r\n  }\r\n\r\n  /**\r\n   * Check if component is mounted\r\n   */\r\n  get isMounted(): boolean {\r\n    return this._mounted;\r\n  }\r\n\r\n  /**\r\n   * Check if component is destroyed\r\n   */\r\n  get isDestroyed(): boolean {\r\n    return this._destroyed;\r\n  }\r\n\r\n  /**\r\n   * Create an element with optional attributes and content\r\n   */\r\n  protected createElement<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K,\r\n    attributes?: Record<string, string>,\r\n    content?: string\r\n  ): HTMLElementTagNameMap[K] {\r\n    const element = document.createElement(tagName);\r\n    \r\n    if (attributes) {\r\n      for (const [key, value] of Object.entries(attributes)) {\r\n        element.setAttribute(key, value);\r\n      }\r\n    }\r\n    \r\n    if (content) {\r\n      element.textContent = content;\r\n    }\r\n    \r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Add event listener with automatic cleanup\r\n   */\r\n  protected addEventListener<K extends keyof HTMLElementEventMap>(\r\n    element: HTMLElement,\r\n    type: K,\r\n    listener: (event: HTMLElementEventMap[K]) => void,\r\n    options?: boolean | AddEventListenerOptions\r\n  ): void {\r\n    const eventListener = listener as EventListener;\r\n    element.addEventListener(type, eventListener, options);\r\n    \r\n    // Store for cleanup on unmount\r\n    if (!this._eventListeners) {\r\n      this._eventListeners = [];\r\n    }\r\n    this._eventListeners.push({ element, type, listener: eventListener, options });\r\n  }\r\n\r\n  private _eventListeners?: Array<{\r\n    element: HTMLElement;\r\n    type: string;\r\n    listener: EventListener;\r\n    options?: boolean | AddEventListenerOptions | undefined;\r\n  }>;\r\n\r\n  /**\r\n   * Clean up event listeners\r\n   */\r\n  protected cleanupEventListeners(): void {\r\n    if (this._eventListeners) {\r\n      for (const { element, type, listener, options } of this._eventListeners) {\r\n        element.removeEventListener(type, listener, options);\r\n      }\r\n      this._eventListeners = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override unmount to include event cleanup\r\n   */\r\n  protected async baseUnmount(): Promise<void> {\r\n    this.cleanupEventListeners();\r\n    this._mounted = false;\r\n    this._destroyed = true;\r\n  }\r\n\r\n  /**\r\n   * Set CSS custom properties on the container\r\n   */\r\n  protected setCSSProperty(property: string, value: string): void {\r\n    this.container.style.setProperty(property, value);\r\n  }\r\n\r\n  /**\r\n   * Get CSS custom property value\r\n   */\r\n  protected getCSSProperty(property: string): string {\r\n    return getComputedStyle(this.container).getPropertyValue(property);\r\n  }\r\n\r\n  /**\r\n   * Add CSS classes to container\r\n   */\r\n  protected addClass(...classes: string[]): void {\r\n    this.container.classList.add(...classes);\r\n  }\r\n\r\n  /**\r\n   * Remove CSS classes from container\r\n   */\r\n  protected removeClass(...classes: string[]): void {\r\n    this.container.classList.remove(...classes);\r\n  }\r\n\r\n  /**\r\n   * Toggle CSS classes on container\r\n   */\r\n  protected toggleClass(className: string, force?: boolean): void {\r\n    this.container.classList.toggle(className, force);\r\n  }\r\n\r\n  /**\r\n   * Query selector within the component\r\n   */\r\n  protected querySelector<T extends Element = Element>(selector: string): T | null {\r\n    return this.container.querySelector<T>(selector);\r\n  }\r\n\r\n  /**\r\n   * Query all elements within the component\r\n   */\r\n  protected querySelectorAll<T extends Element = Element>(selector: string): NodeListOf<T> {\r\n    return this.container.querySelectorAll<T>(selector);\r\n  }\r\n\r\n  /**\r\n   * Create and append child element\r\n   */\r\n  protected appendElement<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K,\r\n    attributes?: Record<string, string>,\r\n    content?: string,\r\n    parent?: HTMLElement\r\n  ): HTMLElementTagNameMap[K] {\r\n    const element = this.createElement(tagName, attributes, content);\r\n    (parent || this.container).appendChild(element);\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Emit a custom event\r\n   */\r\n  protected emit(eventName: string, detail?: unknown): void {\r\n    const event = new CustomEvent(eventName, { detail });\r\n    this.container.dispatchEvent(event);\r\n  }\r\n\r\n  /**\r\n   * Get input value with type safety\r\n   */\r\n  protected getInput<T = unknown>(key: string, defaultValue: T): T {\r\n    return (this.inputs?.[key] as T) ?? defaultValue;\r\n  }\r\n\r\n  /**\r\n   * Set input value\r\n   */\r\n  protected setInput<T = unknown>(key: string, value: T): void {\r\n    if (!this.inputs) {\r\n      this.inputs = {};\r\n    }\r\n    this.inputs[key] = value;\r\n  }\r\n}","/**\r\n * Main Desktop Component\r\n * Renders the complete desktop environment including menu bar, dock/taskbar, and windows\r\n */\r\n\r\nimport { BaseComponent } from '../components/base/base-component.js';\r\nimport { serviceContainer, SERVICE_TOKENS } from '../core/di/service-container.js';\r\nimport { eventBus } from '../core/events/event-bus.js';\r\nimport type { \r\n  IWindowManager, \r\n  IDesktopService, \r\n  IAuthService,\r\n  OSStyle,\r\n  Theme,\r\n  DesktopApp\r\n} from '../core/types/index.js';\r\nimport type { UserConfigService } from '../core/services/user-config.service.js';\r\n\r\nexport class Desktop extends BaseComponent {\r\n  private windowManager!: IWindowManager;\r\n  private desktopService!: IDesktopService;\r\n  private authService!: IAuthService;\r\n  private userConfigService!: UserConfigService;\r\n\r\n  private currentTime = new Date();\r\n  private timeUpdateInterval?: number;\r\n\r\n  /**\r\n   * Mount the desktop component\r\n   */\r\n  async mount(): Promise<void> {\r\n    console.log('Mounting Desktop component...');\r\n\r\n    // Get required services\r\n    this.windowManager = serviceContainer.get(SERVICE_TOKENS.WINDOW_MANAGER);\r\n    this.desktopService = serviceContainer.get(SERVICE_TOKENS.DESKTOP_SERVICE);\r\n    this.authService = serviceContainer.get(SERVICE_TOKENS.AUTH_SERVICE);\r\n    this.userConfigService = serviceContainer.get(SERVICE_TOKENS.USER_CONFIG_SERVICE);\r\n\r\n    // Build desktop structure\r\n    this.buildDesktopStructure();\r\n\r\n    // Setup event listeners\r\n    this.setupEventListeners();\r\n\r\n    // Start time updates\r\n    this.startTimeUpdates();\r\n\r\n    // Apply initial theme and OS style\r\n    this.updateOSStyle();\r\n\r\n    this._mounted = true;\r\n    console.log('Desktop component mounted');\r\n  }\r\n\r\n  /**\r\n   * Build the complete desktop structure\r\n   */\r\n  private buildDesktopStructure(): void {\r\n    this.container.innerHTML = '';\r\n    this.container.className = 'desktop-container';\r\n\r\n    // Apply initial OS style class\r\n    const initialOSStyle = this.desktopService.getOSStyle();\r\n    this.container.classList.add(`os-${initialOSStyle}`);\r\n\r\n    // Create menu bar\r\n    this.createMenuBar();\r\n\r\n    // Create windows container\r\n    this.createWindowsContainer();\r\n\r\n    // Create dock/taskbar based on OS style\r\n    this.createDockTaskbar();\r\n\r\n    // Create desktop icons area\r\n    this.createDesktopIcons();\r\n  }\r\n\r\n  /**\r\n   * Create menu bar (always visible at top)\r\n   */\r\n  private createMenuBar(): void {\r\n    const menuBar = this.createElement('div', { class: 'menu-bar' });\r\n\r\n    // App name\r\n    const appName = this.createElement('div', { class: 'menu-app-name' }, 'VFS Desktop');\r\n    this.addEventListener(appName, 'click', () => this.toggleFileExplorer());\r\n    menuBar.appendChild(appName);\r\n\r\n    // Menu items\r\n    const menuItems = this.createElement('div', { class: 'menu-items' });\r\n    menuBar.appendChild(menuItems);\r\n\r\n    // Status icons\r\n    const statusIcons = this.createElement('div', { class: 'menu-status-icons' });\r\n\r\n    // Authentication buttons/user info\r\n    this.createAuthSection(statusIcons);\r\n\r\n    // Theme toggle\r\n    const themeToggle = this.createElement('div', { class: 'menu-status-icon' });\r\n    themeToggle.title = 'Toggle Theme';\r\n    this.addEventListener(themeToggle, 'click', () => this.toggleTheme());\r\n    statusIcons.appendChild(themeToggle);\r\n\r\n    // OS style toggle\r\n    const osToggle = this.createElement('div', { class: 'menu-status-icon' });\r\n    osToggle.title = 'Switch OS Style';\r\n    this.addEventListener(osToggle, 'click', () => this.toggleOSStyle());\r\n    statusIcons.appendChild(osToggle);\r\n\r\n    // Current time\r\n    const timeDisplay = this.createElement('div', { \r\n      class: 'menu-status-icon',\r\n      id: 'time-display'\r\n    });\r\n    this.updateTimeDisplay(timeDisplay);\r\n    statusIcons.appendChild(timeDisplay);\r\n\r\n    menuBar.appendChild(statusIcons);\r\n    this.container.appendChild(menuBar);\r\n  }\r\n\r\n  /**\r\n   * Create authentication section in menu bar\r\n   */\r\n  private createAuthSection(container: HTMLElement): void {\r\n    const authSection = this.createElement('div', { class: 'auth-section' });\r\n    \r\n    if (this.authService.isAuthenticated()) {\r\n      // Show user info\r\n      const user = this.authService.getCurrentUser()!;\r\n      const userButton = this.createElement('div', { class: 'menu-auth-button' });\r\n      \r\n      const userIcon = this.createElement('span', { class: 'material-icons' }, 'account_circle');\r\n      const userName = this.createElement('span', {}, user.username);\r\n      \r\n      userButton.appendChild(userIcon);\r\n      userButton.appendChild(userName);\r\n      \r\n      this.addEventListener(userButton, 'click', () => this.openUserProfile());\r\n      authSection.appendChild(userButton);\r\n    } else {\r\n      // Show login/register buttons\r\n      const loginButton = this.createElement('div', { class: 'menu-auth-button' });\r\n      loginButton.innerHTML = `\r\n        <span class=\"material-icons\">login</span>\r\n        <span>Login</span>\r\n      `;\r\n      this.addEventListener(loginButton, 'click', () => this.openLogin());\r\n      authSection.appendChild(loginButton);\r\n\r\n      const registerButton = this.createElement('div', { class: 'menu-auth-button' });\r\n      registerButton.innerHTML = `\r\n        <span class=\"material-icons\">person_add</span>\r\n        <span>Register</span>\r\n      `;\r\n      this.addEventListener(registerButton, 'click', () => this.openRegister());\r\n      authSection.appendChild(registerButton);\r\n    }\r\n\r\n    container.appendChild(authSection);\r\n  }\r\n\r\n  /**\r\n   * Create windows container\r\n   */\r\n  private createWindowsContainer(): void {\r\n    const windowsContainer = this.createElement('div', { \r\n      class: 'windows-container',\r\n      id: 'windows-container'\r\n    });\r\n    this.container.appendChild(windowsContainer);\r\n  }\r\n\r\n  /**\r\n   * Create dock (macOS) or taskbar (Windows)\r\n   */\r\n  private createDockTaskbar(): void {\r\n    const osStyle = this.desktopService.getOSStyle();\r\n    \r\n    if (osStyle === 'macos') {\r\n      this.createDock();\r\n    } else {\r\n      this.createTaskbar();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create macOS-style dock\r\n   */\r\n  private createDock(): void {\r\n    const dockContainer = this.createElement('div', { class: 'dock-container' });\r\n    const dock = this.createElement('div', { class: 'dock' });\r\n\r\n    // Get docked applications - use all apps if getDockedApps returns empty\r\n    let dockedApps = this.desktopService.getDockedApps();\r\n    if (dockedApps.length === 0) {\r\n      // Show main apps in dock\r\n      dockedApps = this.desktopService.getApps().slice(0, 6);\r\n    }\r\n\r\n    for (const app of dockedApps) {\r\n      const dockItem = this.createElement('div', { \r\n        class: 'dock-item',\r\n        'data-app-id': app.id\r\n      });\r\n\r\n      const icon = this.createElement('span', { class: 'material-icons' }, app.icon);\r\n      const tooltip = this.createElement('span', { class: 'dock-tooltip' }, app.name);\r\n\r\n      dockItem.appendChild(icon);\r\n      dockItem.appendChild(tooltip);\r\n\r\n      // Add active indicator if app is running\r\n      if (this.desktopService.isAppActive(app.id)) {\r\n        const indicator = this.createElement('div', { class: 'dock-indicator' });\r\n        dockItem.appendChild(indicator);\r\n        dockItem.classList.add('active');\r\n      }\r\n\r\n      this.addEventListener(dockItem, 'click', () => this.toggleApp(app.id));\r\n      dock.appendChild(dockItem);\r\n    }\r\n\r\n    dockContainer.appendChild(dock);\r\n    this.container.appendChild(dockContainer);\r\n  }\r\n\r\n  /**\r\n   * Create Windows-style taskbar\r\n   */\r\n  private createTaskbar(): void {\r\n    const taskbar = this.createElement('div', { class: 'windows-taskbar' });\r\n\r\n    // Start button\r\n    const startButton = this.createElement('div', { class: 'taskbar-start' });\r\n    startButton.innerHTML = `\r\n      <span class=\"material-icons\">apps</span>\r\n      <span>Start</span>\r\n    `;\r\n    this.addEventListener(startButton, 'click', () => this.toggleStartMenu());\r\n    taskbar.appendChild(startButton);\r\n\r\n    // Running apps\r\n    const taskbarApps = this.createElement('div', { class: 'taskbar-apps' });\r\n    this.updateTaskbarApps(taskbarApps);\r\n    taskbar.appendChild(taskbarApps);\r\n\r\n    // System tray\r\n    const systemTray = this.createElement('div', { class: 'taskbar-system' });\r\n    \r\n    const tray = this.createElement('div', { class: 'system-tray' });\r\n    const osToggle = this.createElement('span', { \r\n      class: 'material-icons',\r\n      title: 'Switch OS Style'\r\n    }, 'desktop_windows');\r\n    this.addEventListener(osToggle, 'click', () => this.toggleOSStyle());\r\n    tray.appendChild(osToggle);\r\n    systemTray.appendChild(tray);\r\n\r\n    const clock = this.createElement('div', { \r\n      class: 'taskbar-clock',\r\n      id: 'taskbar-time-display'\r\n    });\r\n    this.updateTimeDisplay(clock);\r\n    systemTray.appendChild(clock);\r\n\r\n    taskbar.appendChild(systemTray);\r\n    this.container.appendChild(taskbar);\r\n  }\r\n\r\n  /**\r\n   * Update taskbar apps (Windows style)\r\n   */\r\n  private updateTaskbarApps(container: HTMLElement): void {\r\n    container.innerHTML = '';\r\n    \r\n    const runningWindows = this.windowManager.getVisibleWindows();\r\n    \r\n    for (const window of runningWindows) {\r\n      const app = this.desktopService.getApp(window.id);\r\n      if (!app) continue;\r\n\r\n      const taskbarItem = this.createElement('div', { \r\n        class: 'taskbar-item active',\r\n        title: app.name\r\n      });\r\n\r\n      const icon = this.createElement('span', { class: 'material-icons' }, app.icon);\r\n      const name = this.createElement('span', { class: 'app-name' }, app.name);\r\n\r\n      taskbarItem.appendChild(icon);\r\n      taskbarItem.appendChild(name);\r\n\r\n      this.addEventListener(taskbarItem, 'click', () => this.toggleApp(app.id));\r\n      container.appendChild(taskbarItem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create desktop icons area\r\n   */\r\n  private createDesktopIcons(): void {\r\n    const iconsArea = this.createElement('div', { class: 'desktop-icons' });\r\n\r\n    // Add some default desktop icons\r\n    this.addDesktopIcon(iconsArea, 'folder', 'Documents', () => this.openDocuments());\r\n    this.addDesktopIcon(iconsArea, 'settings', 'Settings', () => this.openSettings());\r\n\r\n    this.container.appendChild(iconsArea);\r\n  }\r\n\r\n  /**\r\n   * Add a desktop icon\r\n   */\r\n  private addDesktopIcon(container: HTMLElement, icon: string, label: string, onClick: () => void): void {\r\n    const iconElement = this.createElement('div', { class: 'desktop-icon' });\r\n    \r\n    const iconSpan = this.createElement('span', { class: 'icon material-icons' }, icon);\r\n    const labelSpan = this.createElement('span', { class: 'icon-label' }, label);\r\n    \r\n    iconElement.appendChild(iconSpan);\r\n    iconElement.appendChild(labelSpan);\r\n    \r\n    this.addEventListener(iconElement, 'click', onClick);\r\n    this.addEventListener(iconElement, 'dblclick', onClick);\r\n    \r\n    container.appendChild(iconElement);\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for auth state changes\r\n    eventBus.on('auth:login', () => this.updateAuthSection());\r\n    eventBus.on('auth:logout', () => this.updateAuthSection());\r\n\r\n    // Listen for window events\r\n    eventBus.on('window:created', () => this.updateDockTaskbar());\r\n    eventBus.on('window:closed', () => this.updateDockTaskbar());\r\n    eventBus.on('window:activated', () => this.updateDockTaskbar());\r\n\r\n    // Listen for OS style changes\r\n    eventBus.on('desktop:os-style-changed', () => this.updateOSStyle());\r\n    eventBus.on('desktop:theme-changed', () => this.updateThemeDisplay());\r\n  }\r\n\r\n  /**\r\n   * Start time updates\r\n   */\r\n  private startTimeUpdates(): void {\r\n    this.updateTime();\r\n    this.timeUpdateInterval = window.setInterval(() => {\r\n      this.updateTime();\r\n    }, 60000); // Update every minute\r\n  }\r\n\r\n  /**\r\n   * Update current time\r\n   */\r\n  private updateTime(): void {\r\n    this.currentTime = new Date();\r\n    \r\n    const timeDisplay = document.getElementById('time-display');\r\n    if (timeDisplay) {\r\n      this.updateTimeDisplay(timeDisplay);\r\n    }\r\n\r\n    const taskbarTimeDisplay = document.getElementById('taskbar-time-display');\r\n    if (taskbarTimeDisplay) {\r\n      this.updateTimeDisplay(taskbarTimeDisplay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update time display element\r\n   */\r\n  private updateTimeDisplay(element: HTMLElement): void {\r\n    const hours = this.currentTime.getHours();\r\n    const minutes = this.currentTime.getMinutes();\r\n    const ampm = hours >= 12 ? 'PM' : 'AM';\r\n    const formattedHours = hours % 12 || 12;\r\n    const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\r\n    \r\n    element.textContent = `${formattedHours}:${formattedMinutes} ${ampm}`;\r\n  }\r\n\r\n  /**\r\n   * Update OS style\r\n   */\r\n  private updateOSStyle(): void {\r\n    const osStyle = this.desktopService.getOSStyle();\r\n    \r\n    // Remove existing OS classes\r\n    this.container.classList.remove('os-macos', 'os-windows');\r\n    this.container.classList.add(`os-${osStyle}`);\r\n\r\n    // Rebuild dock/taskbar\r\n    const existing = this.container.querySelector('.dock-container, .windows-taskbar');\r\n    if (existing) {\r\n      existing.remove();\r\n    }\r\n    this.createDockTaskbar();\r\n\r\n    // Update OS toggle display\r\n    this.updateOSToggleDisplay();\r\n  }\r\n\r\n  /**\r\n   * Update OS toggle display\r\n   */\r\n  private updateOSToggleDisplay(): void {\r\n    const osStyle = this.desktopService.getOSStyle();\r\n    const toggles = this.container.querySelectorAll('[title=\"Switch OS Style\"]');\r\n    \r\n    for (const toggle of toggles) {\r\n      toggle.textContent = osStyle === 'macos' ? '🍎' : '⊞';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update theme display\r\n   */\r\n  private updateThemeDisplay(): void {\r\n    const theme = this.desktopService.getTheme();\r\n    const toggles = this.container.querySelectorAll('[title=\"Toggle Theme\"]');\r\n    \r\n    for (const toggle of toggles) {\r\n      toggle.textContent = theme === 'dark' ? '🌙 Dark' : '☀️ Light';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update authentication section\r\n   */\r\n  private updateAuthSection(): void {\r\n    const authSection = this.container.querySelector('.auth-section');\r\n    if (authSection) {\r\n      authSection.remove();\r\n    }\r\n    \r\n    const statusIcons = this.container.querySelector('.menu-status-icons');\r\n    if (statusIcons && statusIcons instanceof HTMLElement) {\r\n      this.createAuthSection(statusIcons);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update dock/taskbar\r\n   */\r\n  private updateDockTaskbar(): void {\r\n    const osStyle = this.desktopService.getOSStyle();\r\n    \r\n    if (osStyle === 'macos') {\r\n      const dock = this.container.querySelector('.dock');\r\n      if (dock) {\r\n        // Update dock items\r\n        this.updateDockItems(dock);\r\n      }\r\n    } else {\r\n      const taskbarApps = this.container.querySelector('.taskbar-apps');\r\n      if (taskbarApps) {\r\n        this.updateTaskbarApps(taskbarApps as HTMLElement);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update dock items\r\n   */\r\n  private updateDockItems(dock: Element): void {\r\n    const items = dock.querySelectorAll('.dock-item');\r\n    for (const item of items) {\r\n      const appId = item.getAttribute('data-app-id');\r\n      if (appId) {\r\n        const isActive = this.desktopService.isAppActive(appId);\r\n        item.classList.toggle('active', isActive);\r\n        \r\n        const indicator = item.querySelector('.dock-indicator');\r\n        if (isActive && !indicator) {\r\n          const newIndicator = this.createElement('div', { class: 'dock-indicator' });\r\n          item.appendChild(newIndicator);\r\n        } else if (!isActive && indicator) {\r\n          indicator.remove();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Event handlers\r\n  private toggleFileExplorer(): void {\r\n    this.toggleApp('file-explorer');\r\n  }\r\n\r\n  private toggleApp(appId: string): void {\r\n    this.desktopService.launchApp(appId).catch(console.error);\r\n  }\r\n\r\n  private toggleTheme(): void {\r\n    this.desktopService.toggleTheme();\r\n  }\r\n\r\n  private toggleOSStyle(): void {\r\n    const current = this.desktopService.getOSStyle();\r\n    const newStyle = current === 'macos' ? 'windows' : 'macos';\r\n    this.desktopService.setOSStyle(newStyle);\r\n  }\r\n\r\n  private openLogin(): void {\r\n    this.toggleApp('login');\r\n  }\r\n\r\n  private openRegister(): void {\r\n    this.toggleApp('register');\r\n  }\r\n\r\n  private openUserProfile(): void {\r\n    this.toggleApp('user-profile');\r\n  }\r\n\r\n  private openDocuments(): void {\r\n    this.toggleApp('file-explorer');\r\n  }\r\n\r\n  private openSettings(): void {\r\n    this.toggleApp('settings');\r\n  }\r\n\r\n  private toggleStartMenu(): void {\r\n    // TODO: Implement Windows start menu\r\n    console.log('Start menu clicked');\r\n  }\r\n\r\n  /**\r\n   * Unmount the desktop component\r\n   */\r\n  override async unmount(): Promise<void> {\r\n    // Stop time updates\r\n    if (this.timeUpdateInterval) {\r\n      clearInterval(this.timeUpdateInterval);\r\n    }\r\n\r\n    // Clean up event listeners\r\n    this.cleanupEventListeners();\r\n\r\n    await this.baseUnmount();\r\n    console.log('Desktop component unmounted');\r\n  }\r\n}","/**\r\n * Component Registry\r\n * Central registry for all components with auto-discovery and lazy loading capabilities\r\n */\r\n\r\nimport type { \r\n  ComponentMetadata, \r\n  ComponentRegistryEntry, \r\n  ComponentModule,\r\n  ComponentConstructor,\r\n  IComponent \r\n} from './component-metadata.js';\r\nimport { eventBus } from '../events/event-bus.js';\r\n\r\nexport type ComponentLoadEvent = {\r\n  componentId: string;\r\n  loadTime: number;\r\n  success: boolean;\r\n  error?: Error;\r\n};\r\n\r\nexport type ComponentRegisteredEvent = {\r\n  componentId: string;\r\n  metadata: ComponentMetadata;\r\n};\r\n\r\nexport type ModuleLoadedEvent = {\r\n  moduleId: string;\r\n  module: ComponentModule;\r\n  componentCount: number;\r\n};\r\n\r\nexport class ComponentRegistry {\r\n  private static instance: ComponentRegistry;\r\n  \r\n  private components = new Map<string, ComponentRegistryEntry>();\r\n  private modules = new Map<string, ComponentModule>();\r\n  private loadingPromises = new Map<string, Promise<ComponentConstructor>>();\r\n  \r\n  private constructor() {}\r\n  \r\n  static getInstance(): ComponentRegistry {\r\n    if (!ComponentRegistry.instance) {\r\n      ComponentRegistry.instance = new ComponentRegistry();\r\n    }\r\n    return ComponentRegistry.instance;\r\n  }\r\n\r\n  /**\r\n   * Register a component with metadata and lazy loader\r\n   */\r\n  registerComponent(\r\n    metadata: ComponentMetadata,\r\n    loader: () => Promise<ComponentConstructor>\r\n  ): void {\r\n    const entry: ComponentRegistryEntry = {\r\n      metadata,\r\n      loader,\r\n      isLoaded: false,\r\n      constructor: undefined\r\n    };\r\n    \r\n    this.components.set(metadata.id, entry);\r\n    \r\n    eventBus.emit('component:registered', {\r\n      componentId: metadata.id,\r\n      metadata\r\n    } as ComponentRegisteredEvent);\r\n  }\r\n\r\n  /**\r\n   * Register multiple components from a module\r\n   */\r\n  registerModule(module: ComponentModule, components: Array<{\r\n    metadata: ComponentMetadata;\r\n    loader: () => Promise<ComponentConstructor>;\r\n  }>): void {\r\n    // Register the module\r\n    this.modules.set(module.id, module);\r\n    \r\n    // Register all components in the module\r\n    for (const component of components) {\r\n      this.registerComponent(component.metadata, component.loader);\r\n    }\r\n    \r\n    eventBus.emit('module:loaded', {\r\n      moduleId: module.id,\r\n      module,\r\n      componentCount: components.length\r\n    } as ModuleLoadedEvent);\r\n  }\r\n\r\n  /**\r\n   * Get component metadata by ID\r\n   */\r\n  getComponentMetadata(componentId: string): ComponentMetadata | undefined {\r\n    return this.components.get(componentId)?.metadata;\r\n  }\r\n\r\n  /**\r\n   * Get all registered components\r\n   */\r\n  getAllComponents(): ComponentMetadata[] {\r\n    return Array.from(this.components.values()).map(entry => entry.metadata);\r\n  }\r\n\r\n  /**\r\n   * Get components by category\r\n   */\r\n  getComponentsByCategory(category: string): ComponentMetadata[] {\r\n    return this.getAllComponents().filter(comp => comp.category === category);\r\n  }\r\n\r\n  /**\r\n   * Search components by name, description, or tags\r\n   */\r\n  searchComponents(query: string): ComponentMetadata[] {\r\n    const lowerQuery = query.toLowerCase();\r\n    return this.getAllComponents().filter(comp => \r\n      comp.name.toLowerCase().includes(lowerQuery) ||\r\n      comp.description?.toLowerCase().includes(lowerQuery) ||\r\n      comp.tags?.some(tag => tag.toLowerCase().includes(lowerQuery))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load a component (lazy loading)\r\n   */\r\n  async loadComponent(componentId: string): Promise<ComponentConstructor> {\r\n    const entry = this.components.get(componentId);\r\n    if (!entry) {\r\n      throw new Error(`Component not found: ${componentId}`);\r\n    }\r\n\r\n    // Return if already loaded\r\n    if (entry.isLoaded && entry.constructor) {\r\n      return entry.constructor;\r\n    }\r\n\r\n    // Return existing loading promise if already in progress\r\n    if (this.loadingPromises.has(componentId)) {\r\n      return this.loadingPromises.get(componentId)!;\r\n    }\r\n\r\n    // Start loading\r\n    const loadStartTime = performance.now();\r\n    const loadingPromise = entry.loader()\r\n      .then(constructor => {\r\n        entry.constructor = constructor;\r\n        entry.isLoaded = true;\r\n        entry.loadedAt = new Date();\r\n        \r\n        const loadTime = performance.now() - loadStartTime;\r\n        \r\n        eventBus.emit('component:loaded', {\r\n          componentId,\r\n          loadTime,\r\n          success: true\r\n        } as ComponentLoadEvent);\r\n        \r\n        this.loadingPromises.delete(componentId);\r\n        return constructor;\r\n      })\r\n      .catch(error => {\r\n        const loadTime = performance.now() - loadStartTime;\r\n        \r\n        eventBus.emit('component:loaded', {\r\n          componentId,\r\n          loadTime,\r\n          success: false,\r\n          error\r\n        } as ComponentLoadEvent);\r\n        \r\n        this.loadingPromises.delete(componentId);\r\n        throw error;\r\n      });\r\n\r\n    this.loadingPromises.set(componentId, loadingPromise);\r\n    return loadingPromise;\r\n  }\r\n\r\n  /**\r\n   * Preload components by priority or category\r\n   */\r\n  async preloadComponents(options: {\r\n    categories?: string[];\r\n    maxPriority?: number;\r\n    maxCount?: number;\r\n  } = {}): Promise<void> {\r\n    let componentsToLoad = this.getAllComponents();\r\n\r\n    // Filter by categories\r\n    if (options.categories) {\r\n      componentsToLoad = componentsToLoad.filter(comp => \r\n        options.categories!.includes(comp.category)\r\n      );\r\n    }\r\n\r\n    // Filter by priority\r\n    if (options.maxPriority) {\r\n      componentsToLoad = componentsToLoad.filter(comp => \r\n        (comp.loadPriority ?? 5) <= options.maxPriority!\r\n      );\r\n    }\r\n\r\n    // Sort by priority (lower number = higher priority)\r\n    componentsToLoad.sort((a, b) => (a.loadPriority ?? 5) - (b.loadPriority ?? 5));\r\n\r\n    // Limit count\r\n    if (options.maxCount) {\r\n      componentsToLoad = componentsToLoad.slice(0, options.maxCount);\r\n    }\r\n\r\n    // Load components in parallel\r\n    await Promise.allSettled(\r\n      componentsToLoad.map(comp => this.loadComponent(comp.id))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if component has required dependencies loaded\r\n   */\r\n  checkDependencies(componentId: string): { satisfied: boolean; missing: string[] } {\r\n    const metadata = this.getComponentMetadata(componentId);\r\n    if (!metadata?.dependencies) {\r\n      return { satisfied: true, missing: [] };\r\n    }\r\n\r\n    const missing: string[] = [];\r\n    \r\n    for (const dep of metadata.dependencies) {\r\n      if (dep.type === 'component') {\r\n        const depEntry = this.components.get(dep.id);\r\n        if (!depEntry?.isLoaded && !dep.optional) {\r\n          missing.push(dep.id);\r\n        }\r\n      }\r\n      // TODO: Check service and module dependencies\r\n    }\r\n\r\n    return {\r\n      satisfied: missing.length === 0,\r\n      missing\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get component load statistics\r\n   */\r\n  getLoadStatistics(): {\r\n    total: number;\r\n    loaded: number;\r\n    loading: number;\r\n    unloaded: number;\r\n    loadTimes: Record<string, number>;\r\n  } {\r\n    const entries = Array.from(this.components.values());\r\n    const loadTimes: Record<string, number> = {};\r\n    \r\n    entries.forEach(entry => {\r\n      if (entry.loadedAt) {\r\n        // Calculate load time based on when component was loaded\r\n        // This is a simplified version - in practice you'd track actual load times\r\n        loadTimes[entry.metadata.id] = 0; // Placeholder\r\n      }\r\n    });\r\n\r\n    return {\r\n      total: entries.length,\r\n      loaded: entries.filter(e => e.isLoaded).length,\r\n      loading: this.loadingPromises.size,\r\n      unloaded: entries.filter(e => !e.isLoaded).length,\r\n      loadTimes\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get all registered modules\r\n   */\r\n  getAllModules(): ComponentModule[] {\r\n    return Array.from(this.modules.values());\r\n  }\r\n\r\n  /**\r\n   * Get module by ID\r\n   */\r\n  getModule(moduleId: string): ComponentModule | undefined {\r\n    return this.modules.get(moduleId);\r\n  }\r\n\r\n  /**\r\n   * Clear all registrations (for testing)\r\n   */\r\n  clear(): void {\r\n    this.components.clear();\r\n    this.modules.clear();\r\n    this.loadingPromises.clear();\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const componentRegistry = ComponentRegistry.getInstance();","/**\r\n * Component Scanner\r\n * Automatically discovers and registers components based on file conventions and metadata\r\n */\r\n\r\nimport type { ComponentMetadata, ComponentModule } from './component-metadata.js';\r\nimport { componentRegistry } from './component-registry.js';\r\n\r\n/**\r\n * Component discovery configuration\r\n */\r\nexport interface ComponentScanConfig {\r\n  /** Base paths to scan for components */\r\n  basePaths: string[];\r\n  /** File patterns to match (glob patterns) */\r\n  patterns: string[];\r\n  /** File patterns to exclude */\r\n  excludePatterns?: string[];\r\n  /** Whether to scan recursively */\r\n  recursive?: boolean;\r\n  /** Module definitions for grouping components */\r\n  modules?: ComponentModule[];\r\n}\r\n\r\n/**\r\n * Component file convention\r\n * Components should follow naming conventions for auto-discovery\r\n */\r\nexport interface ComponentFileConvention {\r\n  /** File must end with .component.ts */\r\n  suffix: '.component.ts';\r\n  /** Export name should match filename (PascalCase) */\r\n  exportName: string;\r\n  /** Metadata export name */\r\n  metadataExport: 'metadata' | 'componentMetadata';\r\n}\r\n\r\n/**\r\n * Component Scanner\r\n * Discovers components automatically and registers them\r\n */\r\nexport class ComponentScanner {\r\n  private config: ComponentScanConfig;\r\n  \r\n  constructor(config: ComponentScanConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Scan and register all components\r\n   */\r\n  async scanAndRegister(): Promise<{\r\n    componentsFound: number;\r\n    componentsRegistered: number;\r\n    modulesRegistered: number;\r\n    errors: string[];\r\n  }> {\r\n    const result = {\r\n      componentsFound: 0,\r\n      componentsRegistered: 0,\r\n      modulesRegistered: 0,\r\n      errors: [] as string[]\r\n    };\r\n\r\n    try {\r\n      // Register modules first\r\n      if (this.config.modules) {\r\n        for (const module of this.config.modules) {\r\n          await this.registerModule(module);\r\n          result.modulesRegistered++;\r\n        }\r\n      }\r\n\r\n      // Scan for components using Vite's dynamic imports\r\n      await this.scanWithViteGlob(result);\r\n      \r\n    } catch (error) {\r\n      result.errors.push(`Scanner error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Use Vite's glob import feature for component discovery\r\n   */\r\n  private async scanWithViteGlob(result: {\r\n    componentsFound: number;\r\n    componentsRegistered: number;\r\n    errors: string[];\r\n  }): Promise<void> {\r\n    // Since we can't dynamically scan the filesystem in the browser,\r\n    // we'll create a registration system that components can use to self-register\r\n    \r\n    // Components will call ComponentScanner.registerComponentFile() in their modules\r\n    // This is a compromise between auto-discovery and manual registration\r\n    \r\n    console.log('Component scanner initialized. Components should self-register using registerComponentFile()');\r\n  }\r\n\r\n  /**\r\n   * Register a module with its components\r\n   */\r\n  private async registerModule(module: ComponentModule): Promise<void> {\r\n    try {\r\n      // Register module components with their loaders\r\n      const componentRegistrations: Array<{\r\n        metadata: ComponentMetadata;\r\n        loader: () => Promise<any>;\r\n      }> = [];\r\n\r\n      for (const componentId of module.components) {\r\n        // Generate metadata for module components\r\n        const metadata: ComponentMetadata = {\r\n          id: componentId,\r\n          name: this.generateDisplayName(componentId),\r\n          category: module.category || 'uncategorized',\r\n          ...(module.version && { version: module.version }),\r\n          defaultWindow: {\r\n            title: this.generateDisplayName(componentId),\r\n            position: { x: 100, y: 100 },\r\n            size: { width: 800, height: 600 },\r\n            minSize: { width: 400, height: 300 },\r\n            isResizable: true,\r\n            isDraggable: true\r\n          }\r\n        };\r\n\r\n        // Create loader function\r\n        const loader = this.createComponentLoader(componentId, module.id);\r\n        \r\n        componentRegistrations.push({ metadata, loader });\r\n      }\r\n\r\n      componentRegistry.registerModule(module, componentRegistrations);\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Failed to register module ${module.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a loader function for a component\r\n   */\r\n  private createComponentLoader(componentId: string, moduleId: string) {\r\n    return async () => {\r\n      // This will be replaced with actual dynamic imports in the specific scanner implementations\r\n      throw new Error(`Component loader not implemented for ${componentId} in module ${moduleId}`);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate display name from component ID\r\n   */\r\n  private generateDisplayName(componentId: string): string {\r\n    return componentId\r\n      .split('-')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  }\r\n\r\n  /**\r\n   * Static method for components to self-register\r\n   * This is called by individual component modules\r\n   */\r\n  static registerComponentFile(\r\n    componentId: string,\r\n    metadata: Partial<ComponentMetadata>,\r\n    loader: () => Promise<any>\r\n  ): void {\r\n    const fullMetadata: ComponentMetadata = {\r\n      id: componentId,\r\n      name: metadata.name || componentId,\r\n      category: metadata.category || 'uncategorized',\r\n      ...metadata\r\n    };\r\n\r\n    componentRegistry.registerComponent(fullMetadata, loader);\r\n  }\r\n}\r\n\r\n/**\r\n * Create component scanner with default configuration\r\n */\r\nexport function createComponentScanner(config?: Partial<ComponentScanConfig>): ComponentScanner {\r\n  const defaultConfig: ComponentScanConfig = {\r\n    basePaths: ['./src/components'],\r\n    patterns: ['**/*.component.ts'],\r\n    excludePatterns: ['**/*.spec.ts', '**/*.test.ts'],\r\n    recursive: true,\r\n    ...config\r\n  };\r\n\r\n  return new ComponentScanner(defaultConfig);\r\n}\r\n\r\n/**\r\n * Auto-discovery decorator for components\r\n * Components can use this to automatically register themselves\r\n */\r\nexport function AutoDiscover(metadata: Partial<ComponentMetadata>) {\r\n  return function<T extends new (...args: any[]) => any>(constructor: T) {\r\n    // Extract component ID from constructor name or metadata\r\n    const componentId = metadata.id || constructor.name.replace(/Component$/, '').toLowerCase();\r\n    \r\n    // Self-register the component\r\n    ComponentScanner.registerComponentFile(\r\n      componentId,\r\n      {\r\n        ...metadata,\r\n        id: componentId\r\n      },\r\n      async () => constructor\r\n    );\r\n\r\n    return constructor;\r\n  };\r\n}","/**\r\n * Component Module Definitions\r\n * Defines the feature modules for organizing components\r\n */\r\n\r\nimport type { ComponentModule } from '../core/component-system/component-metadata.js';\r\n\r\n/**\r\n * Admin module - Administrative components\r\n */\r\nexport const adminModule: ComponentModule = {\r\n  id: 'admin',\r\n  name: 'Admin Module',\r\n  description: 'Administrative dashboard and management components',\r\n  version: '1.0.0',\r\n  category: 'admin',\r\n  components: [\r\n    'admin-dashboard',\r\n    'user-management',\r\n    'system-settings',\r\n    'analytics-dashboard',\r\n    'revenue-analytics',\r\n    'usage-analytics',\r\n    'performance-monitor',\r\n    'audit-logs',\r\n    'backup-restore',\r\n    'security-settings'\r\n  ],\r\n  exports: [\r\n    {\r\n      id: 'admin-service',\r\n      type: 'service',\r\n      name: 'AdminService',\r\n      description: 'Service for administrative operations'\r\n    }\r\n  ]\r\n};\r\n\r\n/**\r\n * Authentication module - Auth and user management\r\n */\r\nexport const authModule: ComponentModule = {\r\n  id: 'auth',\r\n  name: 'Authentication Module',\r\n  description: 'User authentication and session management components',\r\n  version: '1.0.0',\r\n  category: 'auth',\r\n  components: [\r\n    'login',\r\n    'register',\r\n    'forgot-password',\r\n    'reset-password',\r\n    'two-factor-auth',\r\n    'profile-settings',\r\n    'account-security',\r\n    'session-management'\r\n  ],\r\n  exports: [\r\n    {\r\n      id: 'auth-service',\r\n      type: 'service',\r\n      name: 'AuthService',\r\n      description: 'Service for user authentication'\r\n    }\r\n  ]\r\n};\r\n\r\n/**\r\n * Chat module - Chat and communication components\r\n */\r\nexport const chatModule: ComponentModule = {\r\n  id: 'chat',\r\n  name: 'Chat Module',\r\n  description: 'Chat interface and communication components',\r\n  version: '1.0.0',\r\n  category: 'communication',\r\n  components: [\r\n    'chat-window',\r\n    'chat-list',\r\n    'message-composer',\r\n    'file-attachment',\r\n    'file-upload',\r\n    'file-display',\r\n    'emoji-picker',\r\n    'chat-settings',\r\n    'conversation-history',\r\n    'voice-chat',\r\n    'video-chat'\r\n  ]\r\n};\r\n\r\n/**\r\n * Designer module - Visual design and workflow components\r\n */\r\nexport const designerModule: ComponentModule = {\r\n  id: 'designer',\r\n  name: 'Designer Module',\r\n  description: 'Visual designers and workflow creation components',\r\n  version: '1.0.0',\r\n  category: 'design',\r\n  components: [\r\n    'workflow-designer',\r\n    'flowchart-designer',\r\n    'dsl-editor',\r\n    'code-editor',\r\n    'visual-builder',\r\n    'component-palette',\r\n    'property-inspector',\r\n    'canvas-editor',\r\n    'export-integration',\r\n    'template-manager'\r\n  ]\r\n};\r\n\r\n/**\r\n * Desktop module - Desktop environment components\r\n */\r\nexport const desktopModule: ComponentModule = {\r\n  id: 'desktop',\r\n  name: 'Desktop Module',\r\n  description: 'Desktop environment and window management components',\r\n  version: '1.0.0',\r\n  category: 'desktop',\r\n  components: [\r\n    'desktop',\r\n    'taskbar',\r\n    'start-menu',\r\n    'applications-menu',\r\n    'window-controls',\r\n    'system-tray',\r\n    'desktop-wallpaper',\r\n    'widget-container'\r\n  ]\r\n};\r\n\r\n/**\r\n * Explorer module - File management components\r\n */\r\nexport const explorerModule: ComponentModule = {\r\n  id: 'explorer',\r\n  name: 'File Explorer Module',\r\n  description: 'File system navigation and management components',\r\n  version: '1.0.0',\r\n  category: 'file-management',\r\n  components: [\r\n    'file-explorer',\r\n    'folder-tree',\r\n    'file-tree',\r\n    'file-browser',\r\n    'file-viewer',\r\n    'file-editor',\r\n    'file-properties',\r\n    'file-search',\r\n    'breadcrumb-navigation'\r\n  ]\r\n};\r\n\r\n/**\r\n * Git module - Version control components\r\n */\r\nexport const gitModule: ComponentModule = {\r\n  id: 'git',\r\n  name: 'Git Integration Module',\r\n  description: 'Git version control and collaboration components',\r\n  version: '1.0.0',\r\n  category: 'version-control',\r\n  components: [\r\n    'git-integration-window',\r\n    'git-diff-viewer',\r\n    'git-conflict-resolver',\r\n    'git-commit-history',\r\n    'git-branch-manager',\r\n    'git-merge-tool',\r\n    'git-status-panel'\r\n  ]\r\n};\r\n\r\n/**\r\n * Development tools module\r\n */\r\nexport const devToolsModule: ComponentModule = {\r\n  id: 'dev-tools',\r\n  name: 'Development Tools Module',\r\n  description: 'Development utilities and debugging tools',\r\n  version: '1.0.0',\r\n  category: 'development',\r\n  components: [\r\n    'component-inspector',\r\n    'state-debugger',\r\n    'performance-profiler',\r\n    'network-monitor',\r\n    'console-viewer',\r\n    'error-boundary-display',\r\n    'hot-reload-manager'\r\n  ]\r\n};\r\n\r\n/**\r\n * Shared module - Common utility components\r\n */\r\nexport const sharedModule: ComponentModule = {\r\n  id: 'shared',\r\n  name: 'Shared Components Module',\r\n  description: 'Reusable utility and UI components',\r\n  version: '1.0.0',\r\n  category: 'utility',\r\n  components: [\r\n    'modal',\r\n    'tooltip',\r\n    'dropdown',\r\n    'tabs',\r\n    'accordion',\r\n    'progress-bar',\r\n    'spinner',\r\n    'notification',\r\n    'confirmation-dialog',\r\n    'form-builder',\r\n    'data-table',\r\n    'pagination',\r\n    'search-box',\r\n    'date-picker',\r\n    'color-picker'\r\n  ]\r\n};\r\n\r\n/**\r\n * All available modules\r\n */\r\nexport const allModules: ComponentModule[] = [\r\n  adminModule,\r\n  authModule,\r\n  chatModule,\r\n  designerModule,\r\n  desktopModule,\r\n  explorerModule,\r\n  gitModule,\r\n  devToolsModule,\r\n  sharedModule\r\n];","/**\r\n * Component Auto-Discovery and Registration\r\n * Registers all component modules and sets up the discovery system\r\n */\r\n\r\nimport { createComponentScanner, ComponentScanner } from '../core/component-system/component-scanner.js';\r\nimport { componentRegistry } from '../core/component-system/component-registry.js';\r\nimport { allModules } from './modules.js';\r\nimport { eventBus } from '../core/events/event-bus.js';\r\nimport { serviceContainer, SERVICE_TOKENS } from '../core/di/service-container.js';\r\nimport type { IWindowManager, WindowRegistryEntry } from '../core/types/index.js';\r\n\r\n/**\r\n * Component discovery and registration service\r\n */\r\nexport class ComponentDiscoveryService {\r\n  private static instance: ComponentDiscoveryService;\r\n  private scanner: ComponentScanner;\r\n  private isInitialized = false;\r\n    private windowManagerRegistered = false;\r\n  \r\n  private constructor() {\r\n    this.scanner = createComponentScanner({\r\n      basePaths: ['./src/components'],\r\n      patterns: ['**/*.component.ts'],\r\n      modules: allModules\r\n    });\r\n  }\r\n  \r\n  static getInstance(): ComponentDiscoveryService {\r\n    if (!ComponentDiscoveryService.instance) {\r\n      ComponentDiscoveryService.instance = new ComponentDiscoveryService();\r\n    }\r\n    return ComponentDiscoveryService.instance;\r\n  }\r\n\r\n  /**\r\n   * Initialize the component discovery system\r\n   */\r\n  async initialize(): Promise<void> {\r\n    if (this.isInitialized) {\r\n      return;\r\n    }\r\n\r\n    console.log('🔍 Initializing component discovery system...');\r\n    \r\n    try {\r\n      // Register all modules and their components\r\n      const result = await this.scanner.scanAndRegister();\r\n      \r\n      console.log(`✅ Component discovery completed:\r\n        - Modules registered: ${result.modulesRegistered}\r\n        - Components found: ${result.componentsFound}\r\n        - Components registered: ${result.componentsRegistered}\r\n        ${result.errors.length > 0 ? `- Errors: ${result.errors.length}` : ''}\r\n      `);\r\n      \r\n      if (result.errors.length > 0) {\r\n        console.warn('Discovery errors:', result.errors);\r\n      }\r\n      \r\n      // Register specific component loaders\r\n      this.registerComponentLoaders();\r\n      \r\n      // Preload high-priority components\r\n      await this.preloadCriticalComponents();\r\n      \r\n      this.isInitialized = true;\r\n      \r\n      eventBus.emit('component-discovery:initialized', {\r\n        modulesCount: result.modulesRegistered,\r\n        componentsCount: result.componentsRegistered\r\n      });\r\n\r\n        // Listen for service container completion to retry window manager registration\r\n        eventBus.on('services:initialized', () => {\r\n            this.retryWindowManagerRegistration();\r\n        });\r\n\r\n    } catch (error) {\r\n      console.error('Failed to initialize component discovery:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register component loaders for existing components\r\n   */\r\n  private registerComponentLoaders(): void {\r\n    // Register existing components that are already created\r\n    this.registerExistingComponents();\r\n    \r\n    // Set up pattern for future components to self-register\r\n    this.setupSelfRegistration();\r\n    \r\n    // Register components with window manager\r\n    this.registerComponentsWithWindowManager();\r\n  }\r\n\r\n  /**\r\n   * Register components that already exist\r\n   */\r\n  private registerExistingComponents(): void {\r\n    // Auth components (already implemented)\r\n    ComponentScanner.registerComponentFile(\r\n      'login',\r\n      {\r\n        id: 'login',\r\n        name: 'Login',\r\n        category: 'auth',\r\n        description: 'User login component',\r\n        icon: 'login',\r\n        defaultWindow: {\r\n          title: 'Login',\r\n          position: { x: 400, y: 200 },\r\n          size: { width: 400, height: 500 },\r\n          minSize: { width: 350, height: 400 },\r\n          isResizable: false,\r\n          isDraggable: true\r\n        },\r\n        allowMultipleInstances: false,\r\n        loadPriority: 1\r\n      },\r\n      async () => {\r\n        const { LoginComponent } = await import('../components/windows/login.component.js');\r\n        return LoginComponent;\r\n      }\r\n    );\r\n\r\n    ComponentScanner.registerComponentFile(\r\n      'register',\r\n      {\r\n        id: 'register',\r\n        name: 'Register',\r\n        category: 'auth',\r\n        description: 'User registration component',\r\n        icon: 'person_add',\r\n        defaultWindow: {\r\n          title: 'Create Account',\r\n          position: { x: 450, y: 150 },\r\n          size: { width: 500, height: 600 },\r\n          minSize: { width: 400, height: 500 },\r\n          isResizable: false,\r\n          isDraggable: true\r\n        },\r\n        allowMultipleInstances: false,\r\n        loadPriority: 2\r\n      },\r\n      async () => {\r\n        const { RegisterComponent } = await import('../components/windows/register.component.js');\r\n        return RegisterComponent;\r\n      }\r\n    );\r\n\r\n      // File Explorer component (KISS implementation)\r\n      ComponentScanner.registerComponentFile(\r\n          'file-explorer',\r\n          {\r\n              id: 'file-explorer',\r\n              name: 'File Explorer',\r\n              category: 'file-management',\r\n              description: 'KISS Virtual File System Explorer - simplified but better in every way',\r\n              icon: '📁',\r\n              defaultWindow: {\r\n                  title: 'File Explorer',\r\n                  position: { x: 200, y: 100 },\r\n                  size: { width: 800, height: 600 },\r\n                  minSize: { width: 400, height: 300 },\r\n                  isResizable: true,\r\n                  isDraggable: true\r\n              },\r\n              allowMultipleInstances: true,\r\n              loadPriority: 3,\r\n              capabilities: [\r\n                  {\r\n                      id: 'virtual-file-system',\r\n                      name: 'Virtual File System',\r\n                      description: 'Navigate and manage virtual file system'\r\n                  },\r\n                  {\r\n                      id: 'drag-drop',\r\n                      name: 'Drag & Drop',\r\n                      description: 'Support for drag and drop file operations'\r\n                  },\r\n                  {\r\n                      id: 'context-menu',\r\n                      name: 'Context Menu',\r\n                      description: 'Right-click context menu for file operations'\r\n                  },\r\n                  {\r\n                      id: 'keyboard-shortcuts',\r\n                      name: 'Keyboard Shortcuts',\r\n                      description: 'Full keyboard navigation support'\r\n                  }\r\n              ],\r\n              tags: ['files', 'explorer', 'vfs', 'navigation', 'kiss']\r\n          },\r\n          async () => {\r\n              const { FileExplorerComponent } = await import('../components/windows/file-explorer.component.js');\r\n              return FileExplorerComponent;\r\n          }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Set up pattern for future components to self-register\r\n   */\r\n  private setupSelfRegistration(): void {\r\n    // Components will use the @AutoDiscover decorator or call ComponentScanner.registerComponentFile\r\n    // This provides a clean pattern for adding new components\r\n    \r\n    // Example for future components:\r\n    // ComponentScanner.registerComponentFile('component-id', metadata, loader);\r\n  }\r\n\r\n  /**\r\n   * Preload critical components for better performance\r\n   */\r\n  private async preloadCriticalComponents(): Promise<void> {\r\n    console.log('⚡ Preloading critical components...');\r\n    \r\n    try {\r\n      // Preload auth components and desktop essentials\r\n      await componentRegistry.preloadComponents({\r\n        categories: ['auth', 'desktop'],\r\n        maxPriority: 3,\r\n        maxCount: 10\r\n      });\r\n      \r\n      console.log('✅ Critical components preloaded');\r\n    } catch (error) {\r\n      console.warn('Failed to preload some components:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register components with window manager for proper window handling\r\n   */\r\n  private registerComponentsWithWindowManager(): void {\r\n      if (this.windowManagerRegistered) {\r\n          console.log('Components already registered with window manager, skipping');\r\n          return;\r\n      }\r\n\r\n    try {\r\n      const windowManager = serviceContainer.get<any>(SERVICE_TOKENS.WINDOW_MANAGER); // Use any to access registerWindow\r\n      \r\n      // Get all registered components and register them with window manager\r\n      const allComponents = componentRegistry.getAllComponents();\r\n        let registeredCount = 0;\r\n      \r\n      for (const component of allComponents) {\r\n        if (component.defaultWindow) {\r\n          const windowConfig: WindowRegistryEntry = {\r\n            defaultTitle: component.defaultWindow.title || component.name,\r\n            defaultSize: component.defaultWindow.size || { width: 800, height: 600 },\r\n            defaultPosition: component.defaultWindow.position || { x: 100, y: 100 },\r\n            minSize: component.defaultWindow.minSize || { width: 400, height: 300 },\r\n            ...(component.defaultWindow.maxSize && { maxSize: component.defaultWindow.maxSize }),\r\n            category: component.category,\r\n            isDocked: false,\r\n            isResizable: component.defaultWindow.isResizable ?? true,\r\n            isDraggable: component.defaultWindow.isDraggable ?? true\r\n          };\r\n          \r\n          if (typeof windowManager.registerWindow === 'function') {\r\n            windowManager.registerWindow(component.id, windowConfig);\r\n              registeredCount++;\r\n          }\r\n        }\r\n      }\r\n      \r\n        this.windowManagerRegistered = true;\r\n        console.log(`✅ Registered ${registeredCount} components with window manager`);\r\n    } catch (error) {\r\n        console.warn('Failed to register components with window manager (will retry after services are initialized):', error);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * Retry window manager registration after services are initialized\r\n     */\r\n    private retryWindowManagerRegistration(): void {\r\n        console.log('🔄 Retrying component registration with window manager...');\r\n        this.registerComponentsWithWindowManager();\r\n  }\r\n\r\n  /**\r\n   * Get discovery statistics\r\n   */\r\n  getStatistics() {\r\n    const registryStats = componentRegistry.getLoadStatistics();\r\n    const modules = componentRegistry.getAllModules();\r\n    \r\n    return {\r\n      ...registryStats,\r\n      modules: modules.length,\r\n      isInitialized: this.isInitialized\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Register a new component at runtime\r\n   */\r\n  registerComponent(\r\n    componentId: string,\r\n    metadata: any,\r\n    loader: () => Promise<any>\r\n  ): void {\r\n    ComponentScanner.registerComponentFile(componentId, metadata, loader);\r\n  }\r\n\r\n  /**\r\n   * Load a component by ID\r\n   */\r\n  async loadComponent(componentId: string) {\r\n    return componentRegistry.loadComponent(componentId);\r\n  }\r\n\r\n  /**\r\n   * Search for components\r\n   */\r\n  searchComponents(query: string) {\r\n    return componentRegistry.searchComponents(query);\r\n  }\r\n\r\n  /**\r\n   * Get components by category\r\n   */\r\n  getComponentsByCategory(category: string) {\r\n    return componentRegistry.getComponentsByCategory(category);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const componentDiscovery = ComponentDiscoveryService.getInstance();","/**\r\n * Main entry point for the VFS Desktop application\r\n * Initializes all core services and starts the desktop environment\r\n */\r\n\r\nimport { serviceContainer, SERVICE_TOKENS } from './core/di/service-container.js';\r\nimport { eventBus } from './core/events/event-bus.js';\r\nimport { WindowManager } from './windowing/window-manager.js';\r\nimport { DesktopService } from './desktop/desktop-service.js';\r\nimport { AuthService } from './auth/auth-service.js';\r\nimport { ThemeService } from './services/theme-service.js';\r\nimport { ComponentLoaderService } from './core/services/component-loader.service.js';\r\nimport { UserConfigService } from './core/services/user-config.service.js';\r\nimport { Desktop } from './desktop/desktop.js';\r\nimport { componentDiscovery } from './components/component-discovery.js';\r\nimport type { VFSConfig } from './core/types/index.js';\r\n\r\n// Default configuration\r\nconst defaultConfig: VFSConfig = {\r\n  theme: 'light',\r\n  osStyle: 'macos',\r\n  enableAnimations: true,\r\n  animationDuration: 300,\r\n  defaultWindowSize: { width: 800, height: 600 },\r\n  apiBaseUrl: '/api',\r\n  storagePrefix: 'vfs-'\r\n};\r\n\r\n/**\r\n * VFS Desktop Application class\r\n */\r\nexport class VFSDesktop {\r\n  private desktop?: Desktop | undefined;\r\n  private initialized = false;\r\n\r\n  constructor(private config: Partial<VFSConfig> = {}) {\r\n    this.config = { ...defaultConfig, ...config };\r\n  }\r\n\r\n  /**\r\n   * Initialize the desktop application\r\n   */\r\n  async initialize(): Promise<void> {\r\n    if (this.initialized) {\r\n      console.warn('VFS Desktop already initialized');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('Initializing VFS Desktop...');\r\n\r\n      // Register core services first\r\n      this.registerServices();\r\n\r\n      // Initialize component discovery system after services are registered\r\n      await componentDiscovery.initialize();\r\n\r\n      // Initialize all services\r\n      await serviceContainer.initializeAll();\r\n\r\n      // Emit services initialized event for component discovery retry\r\n      eventBus.emit('services:initialized');\r\n\r\n      // Create and mount desktop\r\n      const desktopContainer = document.getElementById('desktop-container');\r\n      if (!desktopContainer) {\r\n        throw new Error('Desktop container element not found');\r\n      }\r\n\r\n      this.desktop = new Desktop(desktopContainer);\r\n      await this.desktop.mount();\r\n\r\n      // Apply initial theme\r\n      const themeService = serviceContainer.get<ThemeService>(SERVICE_TOKENS.THEME_SERVICE);\r\n      themeService.setTheme(this.config.theme!);\r\n\r\n      // Set initial OS style\r\n      const desktopService = serviceContainer.get<DesktopService>(SERVICE_TOKENS.DESKTOP_SERVICE);\r\n      desktopService.setOSStyle(this.config.osStyle!);\r\n\r\n      this.initialized = true;\r\n      console.log('VFS Desktop initialized successfully');\r\n\r\n      // Emit initialization complete event\r\n      eventBus.emit('desktop:initialized', this);\r\n\r\n    } catch (error) {\r\n      console.error('Failed to initialize VFS Desktop:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register all core services with the DI container\r\n   */\r\n  private registerServices(): void {\r\n    // Core services\r\n    serviceContainer.register(SERVICE_TOKENS.WINDOW_MANAGER, WindowManager);\r\n    serviceContainer.register(SERVICE_TOKENS.DESKTOP_SERVICE, DesktopService);\r\n    serviceContainer.register(SERVICE_TOKENS.AUTH_SERVICE, AuthService);\r\n    serviceContainer.register(SERVICE_TOKENS.THEME_SERVICE, ThemeService);\r\n    serviceContainer.register(SERVICE_TOKENS.COMPONENT_LOADER, ComponentLoaderService);\r\n    serviceContainer.register(SERVICE_TOKENS.USER_CONFIG_SERVICE, UserConfigService);\r\n\r\n    console.log('Core services registered');\r\n  }\r\n\r\n  /**\r\n   * Destroy the desktop application\r\n   */\r\n  async destroy(): Promise<void> {\r\n    if (!this.initialized) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('Destroying VFS Desktop...');\r\n\r\n      // Unmount desktop\r\n      if (this.desktop) {\r\n        await this.desktop.unmount();\r\n        this.desktop = undefined;\r\n      }\r\n\r\n      // Destroy all services\r\n      await serviceContainer.destroyAll();\r\n\r\n      // Clear event listeners\r\n      eventBus.removeAllListeners();\r\n\r\n      this.initialized = false;\r\n      console.log('VFS Desktop destroyed successfully');\r\n\r\n    } catch (error) {\r\n      console.error('Error destroying VFS Desktop:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the current configuration\r\n   */\r\n  getConfig(): VFSConfig {\r\n    return this.config as VFSConfig;\r\n  }\r\n\r\n  /**\r\n   * Check if desktop is initialized\r\n   */\r\n  isInitialized(): boolean {\r\n    return this.initialized;\r\n  }\r\n}\r\n\r\n/**\r\n * Initialize the desktop when DOM is ready\r\n */\r\nasync function initializeDesktop(): Promise<void> {\r\n  // Wait for DOM to be ready\r\n  if (document.readyState === 'loading') {\r\n    await new Promise(resolve => {\r\n      document.addEventListener('DOMContentLoaded', resolve, { once: true });\r\n    });\r\n  }\r\n\r\n  // Create and initialize desktop\r\n  const desktop = new VFSDesktop();\r\n  \r\n  // Make desktop globally available for debugging\r\n  (window as any).vfsDesktop = desktop;\r\n\r\n  try {\r\n    await desktop.initialize();\r\n  } catch (error) {\r\n    console.error('Failed to initialize desktop:', error);\r\n    \r\n    // Show error message to user\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.style.cssText = `\r\n      position: fixed;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n      background: #ef4444;\r\n      color: white;\r\n      padding: 5px;\r\n      border-radius: 8px;\r\n      font-family: system-ui, sans-serif;\r\n      z-index: 10000;\r\n    `;\r\n    errorDiv.textContent = `Failed to initialize VFS Desktop: ${error instanceof Error ? error.message : 'Unknown error'}`;\r\n    document.body.appendChild(errorDiv);\r\n  }\r\n}\r\n\r\n// Auto-initialize\r\ninitializeDesktop().catch(console.error);\r\n\r\n// Export for manual initialization if needed\r\nexport { initializeDesktop };"],"file":"assets/main-888e55a8.js"}